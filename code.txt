Directory Tree:
commerce/
│   ├── license.md
│   ├── .env.local
│   ├── postcss.config.mjs
│   ├── code.txt
│   ├── next-env.d.ts
│   ├── README.md
│   ├── yarn.lock
│   ├── .gitignore
│   ├── tsconfig.json
│   ├── next.config.ts
│   ├── app/
│   │   ├── robots.ts
│   │   ├── favicon.ico
│   │   ├── opengraph-image.tsx
│   │   ├── sitemap.ts
│   │   ├── layout.tsx
│   │   ├── error.tsx
│   │   ├── page.tsx
│   │   ├── globals.css
│   │   ├── (pages)/
│   │   │   ├── layout.tsx
│   │   │   ├── faq/
│   │   │   │   ├── page.tsx
│   │   │   │   ├── components/
│   │   │   │   │   ├── FAQSection.tsx
│   │   │   ├── contact-information/
│   │   │   │   ├── page.tsx
│   │   │   ├── our-vision/
│   │   │   │   ├── page.tsx
│   │   ├── product/
│   │   │   ├── [handle]/
│   │   │   │   ├── page.tsx
│   │   ├── policies/
│   │   │   ├── [policy]/
│   │   │   │   ├── page.tsx
│   │   ├── search/
│   │   │   ├── layout.tsx
│   │   │   ├── children-wrapper.tsx
│   │   │   ├── loading.tsx
│   │   │   ├── page.tsx
│   │   │   ├── [collection]/
│   │   │   │   ├── opengraph-image.tsx
│   │   │   │   ├── page.tsx
│   │   ├── [page]/
│   │   │   ├── opengraph-image.tsx
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   ├── api/
│   │   │   ├── subscribe/
│   │   │   │   ├── route.ts
│   │   │   ├── revalidate/
│   │   │   │   ├── route.ts
│   ├── components/
│   │   ├── prose.tsx
│   │   ├── logo-square.tsx
│   │   ├── opengraph-image.tsx
│   │   ├── label.tsx
│   │   ├── welcome-toast.tsx
│   │   ├── price.tsx
│   │   ├── loading-dots.tsx
│   │   ├── carousel.tsx
│   │   ├── layout/
│   │   │   ├── product-grid-items.tsx
│   │   │   ├── navbar/
│   │   │   │   ├── index.tsx
│   │   │   │   ├── components/
│   │   │   │   │   ├── NavbarClient.tsx
│   │   │   │   │   ├── CartMenu.tsx
│   │   │   │   │   ├── Search.tsx
│   │   │   │   │   ├── SideMenuToggle.tsx
│   │   │   │   │   ├── SearchSkeleton.tsx
│   │   │   │   │   ├── MobileMenu.tsx
│   │   │   ├── footer/
│   │   │   │   ├── FooterSocialIcons.tsx
│   │   │   │   ├── Footer.tsx
│   │   │   │   ├── FooterTopSection.tsx
│   │   │   │   ├── FooterBottomSection.tsx
│   │   │   │   ├── components/
│   │   │   │   │   ├── FooterColumns.tsx
│   │   │   │   │   ├── FooterLogoAndSubscribe.tsx
│   │   │   ├── search/
│   │   │   │   ├── collections.tsx
│   │   │   │   ├── filter/
│   │   │   │   │   ├── index.tsx
│   │   │   │   │   ├── item.tsx
│   │   │   │   │   ├── dropdown.tsx
│   │   │   ├── landingPage/
│   │   │   │   ├── LandingPage.tsx
│   │   │   │   ├── LandingPageClient.tsx
│   │   ├── product/
│   │   │   ├── gallery.tsx
│   │   │   ├── product-description.tsx
│   │   │   ├── variant-selector.tsx
│   │   │   ├── product-context.tsx
│   │   ├── theme/
│   │   │   ├── ThemeToggle.tsx
│   │   ├── hooks/
│   │   │   ├── useIsMobile.ts
│   │   ├── icons/
│   │   │   ├── logo.tsx
│   │   ├── cart/
│   │   │   ├── edit-item-quantity-button.tsx
│   │   │   ├── cart-context.tsx
│   │   │   ├── actions.ts
│   │   │   ├── delete-item-button.tsx
│   │   │   ├── add-to-cart.tsx
│   │   │   ├── CartIcon.tsx
│   │   │   ├── modal.tsx
│   │   │   ├── components/
│   │   │   │   ├── CartModal.tsx
│   │   │   │   ├── CartHeader.tsx
│   │   │   │   ├── CartItem.tsx
│   │   │   │   ├── CartSummary.tsx
│   │   │   │   ├── CartContents.tsx
│   │   │   │   ├── EmptyCart.tsx
│   │   │   │   ├── CheckoutButton.tsx
│   │   ├── grid/
│   │   │   ├── index.tsx
│   │   │   ├── three-items.tsx
│   │   │   ├── tile.tsx
│   ├── public/
│   │   ├── images/
│   │   │   ├── landingPage/
│   │   │   │   ├── image1.jpg
│   │   │   │   ├── image2.jpg
│   │   │   │   ├── image3.jpg
│   │   ├── fonts/
│   │   │   ├── PlayfairDisplay/
│   │   │   │   ├── PlayfairDisplay-Bold.ttf
│   │   │   │   ├── PlayfairDisplay-SemiBold.ttf
│   │   │   │   ├── PlayfairDisplay-Italic.ttf
│   │   │   │   ├── PlayfairDisplay-Regular.ttf
│   │   ├── data/
│   │   │   ├── README.md
│   │   │   ├── faq/
│   │   │   │   ├── data.json
│   │   │   ├── menu/
│   │   │   │   ├── data.json
│   │   │   ├── socials/
│   │   │   │   ├── data.json
│   │   │   ├── landingPage/
│   │   │   │   ├── data.json
│   ├── theme/
│   │   ├── useThemeMode.ts
│   │   ├── ThemeProvider.tsx
│   │   ├── theme.ts
│   ├── lib/
│   │   ├── type-guards.ts
│   │   ├── utils.ts
│   │   ├── constants.ts
│   │   ├── shopify/
│   │   │   ├── types.ts
│   │   │   ├── index.ts
│   │   │   ├── fragments/
│   │   │   │   ├── image.ts
│   │   │   │   ├── product.ts
│   │   │   │   ├── seo.ts
│   │   │   │   ├── cart.ts
│   │   │   ├── mutations/
│   │   │   │   ├── cart.ts
│   │   │   ├── queries/
│   │   │   │   ├── policies.ts
│   │   │   │   ├── product.ts
│   │   │   │   ├── collection.ts
│   │   │   │   ├── menu.ts
│   │   │   │   ├── page.ts
│   │   │   │   ├── cart.ts
│   │   ├── data/
│   ├── .git/ [EXCLUDED]
│   ├── .vscode/
│   │   ├── settings.json
│   │   ├── launch.json
│   ├── fonts/
│   │   ├── Inter-Bold.ttf




# ======================
# File: license.md
# ======================

The MIT License (MIT)

Copyright (c) 2025 Vercel, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


# ======================
# File: next-env.d.ts
# ======================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


# ======================
# File: README.md
# ======================

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fcommerce&project-name=commerce&repo-name=commerce&demo-title=Next.js%20Commerce&demo-url=https%3A%2F%2Fdemo.vercel.store&demo-image=https%3A%2F%2Fbigcommerce-demo-asset-ksvtgfvnd.vercel.app%2Fbigcommerce.png&env=COMPANY_NAME,SHOPIFY_REVALIDATION_SECRET,SHOPIFY_STORE_DOMAIN,SHOPIFY_STOREFRONT_ACCESS_TOKEN,SITE_NAME)

# Next.js Commerce

A high-performance, server-rendered Next.js App Router ecommerce application.

This template uses React Server Components, Server Actions, `Suspense`, `useOptimistic`, and more.

<h3 id="v1-note"></h3>

> Note: Looking for Next.js Commerce v1? View the [code](https://github.com/vercel/commerce/tree/v1), [demo](https://commerce-v1.vercel.store), and [release notes](https://github.com/vercel/commerce/releases/tag/v1).

## Providers

Vercel will only be actively maintaining a Shopify version [as outlined in our vision and strategy for Next.js Commerce](https://github.com/vercel/commerce/pull/966).

Vercel is happy to partner and work with any commerce provider to help them get a similar template up and running and listed below. Alternative providers should be able to fork this repository and swap out the `lib/shopify` file with their own implementation while leaving the rest of the template mostly unchanged.

- Shopify (this repository)
- [BigCommerce](https://github.com/bigcommerce/nextjs-commerce) ([Demo](https://next-commerce-v2.vercel.app/))
- [Ecwid by Lightspeed](https://github.com/Ecwid/ecwid-nextjs-commerce/) ([Demo](https://ecwid-nextjs-commerce.vercel.app/))
- [Geins](https://github.com/geins-io/vercel-nextjs-commerce) ([Demo](https://geins-nextjs-commerce-starter.vercel.app/))
- [Medusa](https://github.com/medusajs/vercel-commerce) ([Demo](https://medusa-nextjs-commerce.vercel.app/))
- [Prodigy Commerce](https://github.com/prodigycommerce/nextjs-commerce) ([Demo](https://prodigy-nextjs-commerce.vercel.app/))
- [Saleor](https://github.com/saleor/nextjs-commerce) ([Demo](https://saleor-commerce.vercel.app/))
- [Shopware](https://github.com/shopwareLabs/vercel-commerce) ([Demo](https://shopware-vercel-commerce-react.vercel.app/))
- [Swell](https://github.com/swellstores/verswell-commerce) ([Demo](https://verswell-commerce.vercel.app/))
- [Umbraco](https://github.com/umbraco/Umbraco.VercelCommerce.Demo) ([Demo](https://vercel-commerce-demo.umbraco.com/))
- [Wix](https://github.com/wix/headless-templates/tree/main/nextjs/commerce) ([Demo](https://wix-nextjs-commerce.vercel.app/))
- [Fourthwall](https://github.com/FourthwallHQ/vercel-commerce) ([Demo](https://vercel-storefront.fourthwall.app/))

> Note: Providers, if you are looking to use similar products for your demo, you can [download these assets](https://drive.google.com/file/d/1q_bKerjrwZgHwCw0ovfUMW6He9VtepO_/view?usp=sharing).

## Integrations

Integrations enable upgraded or additional functionality for Next.js Commerce

- [Orama](https://github.com/oramasearch/nextjs-commerce) ([Demo](https://vercel-commerce.oramasearch.com/))

  - Upgrades search to include typeahead with dynamic re-rendering, vector-based similarity search, and JS-based configuration.
  - Search runs entirely in the browser for smaller catalogs or on a CDN for larger.

- [React Bricks](https://github.com/ReactBricks/nextjs-commerce-rb) ([Demo](https://nextjs-commerce.reactbricks.com/))
  - Edit pages, product details, and footer content visually using [React Bricks](https://www.reactbricks.com) visual headless CMS.

## Running locally

You will need to use the environment variables [defined in `.env.example`](.env.example) to run Next.js Commerce. It's recommended you use [Vercel Environment Variables](https://vercel.com/docs/concepts/projects/environment-variables) for this, but a `.env` file is all that is necessary.

> Note: You should not commit your `.env` file or it will expose secrets that will allow others to control your Shopify store.

1. Install Vercel CLI: `npm i -g vercel`
2. Link local instance with Vercel and GitHub accounts (creates `.vercel` directory): `vercel link`
3. Download your environment variables: `vercel env pull`

```bash
pnpm install
pnpm dev
```

Your app should now be running on [localhost:3000](http://localhost:3000/).

<details>
  <summary>Expand if you work at Vercel and want to run locally and / or contribute</summary>

1. Run `vc link`.
1. Select the `Vercel Solutions` scope.
1. Connect to the existing `commerce-shopify` project.
1. Run `vc env pull` to get environment variables.
1. Run `pnpm dev` to ensure everything is working correctly.
</details>

## Vercel, Next.js Commerce, and Shopify Integration Guide

You can use this comprehensive [integration guide](https://vercel.com/docs/integrations/ecommerce/shopify) with step-by-step instructions on how to configure Shopify as a headless CMS using Next.js Commerce as your headless Shopify storefront on Vercel.


# ======================
# File: tsconfig.json
# ======================

{
  "compilerOptions": {
    "target": "es2015",
    "lib": ["dom", "dom.iterable", "esnext"],
    "downlevelIteration": true,
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "noUncheckedIndexedAccess": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


# ======================
# File: next.config.ts
# ======================

export default {
  experimental: {
    ppr: true,
    inlineCss: true,
    useCache: true,
    newDevOverlay: true 
  },
  images: {
    formats: ['image/avif', 'image/webp'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'cdn.shopify.com',
        pathname: '/s/files/**'
      }
    ]
  }
};


# ======================
# File: app/robots.ts
# ======================

import { baseUrl } from 'lib/utils';

export default function robots() {
  return {
    rules: [
      {
        userAgent: '*'
      }
    ],
    sitemap: `${baseUrl}/sitemap.xml`,
    host: baseUrl
  };
}


# ======================
# File: app/opengraph-image.tsx
# ======================

import OpengraphImage from 'components/opengraph-image';

export default async function Image() {
  return await OpengraphImage();
}


# ======================
# File: app/sitemap.ts
# ======================

import { getCollections, getPages, getProducts } from 'lib/shopify';
import { baseUrl, validateEnvironmentVariables } from 'lib/utils';
import { MetadataRoute } from 'next';

type Route = {
  url: string;
  lastModified: string;
};

export const dynamic = 'force-dynamic';

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  validateEnvironmentVariables();

  const routesMap = [''].map((route) => ({
    url: `${baseUrl}${route}`,
    lastModified: new Date().toISOString()
  }));

  const collectionsPromise = getCollections().then((collections) =>
    collections.map((collection) => ({
      url: `${baseUrl}${collection.path}`,
      lastModified: collection.updatedAt
    }))
  );

  const productsPromise = getProducts({}).then((products) =>
    products.map((product) => ({
      url: `${baseUrl}/product/${product.handle}`,
      lastModified: product.updatedAt
    }))
  );

  const pagesPromise = getPages().then((pages) =>
    pages.map((page) => ({
      url: `${baseUrl}/${page.handle}`,
      lastModified: page.updatedAt
    }))
  );

  let fetchedRoutes: Route[] = [];

  try {
    fetchedRoutes = (
      await Promise.all([collectionsPromise, productsPromise, pagesPromise])
    ).flat();
  } catch (error) {
    throw JSON.stringify(error, null, 2);
  }

  return [...routesMap, ...fetchedRoutes];
}


# ======================
# File: app/layout.tsx
# ======================

import { CartProvider } from "components/cart/cart-context";
import LandingPageClient from "components/layout/landingPage/LandingPageClient";
import { Navbar } from "components/layout/navbar";
import { WelcomeToast } from "components/welcome-toast";
import { GeistSans } from "geist/font/sans";
import { getCart } from "lib/shopify";
import { baseUrl } from "lib/utils";
import { ReactNode } from "react";
import { Toaster } from "sonner";
import ThemeProvider from "theme/ThemeProvider";
import "./globals.css";

const { SITE_NAME } = process.env;

export const metadata = {
  metadataBase: new URL(baseUrl),
  title: {
    default: SITE_NAME!,
    template: `%s | ${SITE_NAME}`,
  },
  robots: {
    follow: true,
    index: true,
  },
};

export default async function RootLayout({ children }: { children: ReactNode }) {
  const cart = getCart();

  return (
    <html lang="en" className={GeistSans.variable}>
      <body>
        <ThemeProvider>
          <CartProvider cartPromise={cart}>
            <Navbar />
            <LandingPageClient />
            <main className="mt-[64px]">
              {children}
              <Toaster closeButton />
              <WelcomeToast />
            </main>
          </CartProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}


# ======================
# File: app/error.tsx
# ======================

'use client';

export default function Error({ reset }: { reset: () => void }) {
  return (
    <div className="mx-auto my-4 flex max-w-xl flex-col rounded-lg border border-neutral-200 bg-white p-8 md:p-12 dark:border-neutral-800 dark:bg-black">
      <h2 className="text-xl font-bold">Oh no!</h2>
      <p className="my-2">
        There was an issue with our storefront. This could be a temporary issue, please try your
        action again.
      </p>
      <button
        className="mx-auto mt-4 flex w-full items-center justify-center rounded-full bg-blue-600 p-4 tracking-wide text-white hover:opacity-90"
        onClick={() => reset()}
      >
        Try Again
      </button>
    </div>
  );
}


# ======================
# File: app/page.tsx
# ======================

import { Carousel } from 'components/carousel';
import { ThreeItemGrid } from 'components/grid/three-items';
import Footer from 'components/layout/footer/Footer';

export const metadata = {
  description:
    'High-performance ecommerce store built with Next.js, Vercel, and Shopify.',
  openGraph: {
    type: 'website'
  }
};

export default function HomePage() {
  return (
    <>
      <ThreeItemGrid />
      <Carousel />
      <Footer />
    </>
  );
}


# ======================
# File: app/globals.css
# ======================

@import 'tailwindcss';

/* Tailwind Plugins */
@plugin "@tailwindcss/container-queries";
@plugin "@tailwindcss/typography";

/* Base Styles */
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

/* Optimized Self-Hosted Fonts */
@font-face {
  font-family: "Playfair Display";
  src: url("/fonts/PlayfairDisplay/PlayfairDisplay-Regular.ttf") format("truetype");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "Playfair Display";
  src: url("/fonts/PlayfairDisplay/PlayfairDisplay-Bold.ttf") format("truetype");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: "Playfair Display";
  src: url("/fonts/PlayfairDisplay/PlayfairDisplay-Italic.ttf") format("truetype");
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: "Playfair Display";
  src: url("/fonts/PlayfairDisplay/PlayfairDisplay-MediumItalic.ttf") format("truetype");
  font-weight: 500;
  font-style: italic;
}


@font-face {
  font-family: "Playfair Display";
  src: url("/fonts/PlayfairDisplay/PlayfairDisplay-SemiBold.ttf") format("truetype");
  font-weight: 600;
  font-style: normal;
}

/* Apply Font Globally */
body {
  font-family: "Playfair Display", serif;
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

/* Fix Safari Lazy Loading Bug */
@supports (font: -apple-system-body) and (-webkit-appearance: none) {
  img[loading='lazy'] {
    clip-path: inset(0.6px);
    will-change: transform;
  }
}

/* Minimal Focus Styles for Accessibility */
a,
input,
button {
  @apply focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 focus-visible:ring-offset-neutral-50 dark:focus-visible:ring-neutral-600 dark:focus-visible:ring-offset-neutral-900;
}


# ======================
# File: app/(pages)/layout.tsx
# ======================

import Footer from "components/layout/footer/Footer";

export default function PagesLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="flex flex-col min-h-screen">
      <main className="flex-grow">
        {children}
      </main>
      <Footer />
    </div>
  );
}


# ======================
# File: app/(pages)/faq/page.tsx
# ======================

"use client";

import { useEffect, useState } from "react";
import FAQSection from "./components/FAQSection"; // Adjust the import path if needed

// Define an interface for an FAQ item
interface FAQ {
  question: string;
  answer: string;
}

export default function FAQPage() {
  const [faqData, setFaqData] = useState<FAQ[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/data/faq/data.json")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch FAQ data");
        }
        return response.json();
      })
      .then((data: FAQ[]) => {
        setFaqData(data);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching FAQ data:", error);
        setLoading(false);
      });
  }, []);

  if (loading) return <p>Loading...</p>;
  if (!faqData || faqData.length === 0) return <p>No FAQ data found.</p>;

  return (
    <div className="w-full max-w-4xl mx-auto px-6 pt-16 pb-32">
      <h1 className="text-5xl font-bold mb-6 text-gray-900 dark:text-white">
        Frequently Asked Questions
      </h1>
      <FAQSection faqs={faqData} />
    </div>
  );
}


# ======================
# File: app/(pages)/faq/components/FAQSection.tsx
# ======================

export default function FAQSection({ faqs }: { faqs: { question: string; answer: string }[] }) {
    return (
      <div className="space-y-6">
        {faqs.map((faq, index) => (
          <div key={index} className="border-b pb-4">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">{faq.question}</h2>
            <p className="text-gray-700 dark:text-gray-300">{faq.answer}</p>
          </div>
        ))}
      </div>
    );
  }
  

# ======================
# File: app/(pages)/contact-information/page.tsx
# ======================

import { Typography } from "@mui/material";


export default function ContactPage() {

  return (
    <div>
      <Typography>
        Contact Page
      </Typography>
    </div>
  );
}


# ======================
# File: app/(pages)/our-vision/page.tsx
# ======================

"use client";


export default function OurVisionPage() {

  return (
    <div className="w-full max-w-4xl mx-auto px-6 pt-16 pb-32">
      <h1 className="text-5xl font-bold mb-6 text-gray-900 dark:text-white">
        Our Vision
      </h1>
    </div>
  );
}


# ======================
# File: app/product/[handle]/page.tsx
# ======================

import type { Metadata } from 'next';
import { notFound } from 'next/navigation';

import { GridTileImage } from 'components/grid/tile';
import Footer from 'components/layout/footer/Footer';
import { Gallery } from 'components/product/gallery';
import { ProductProvider } from 'components/product/product-context';
import { ProductDescription } from 'components/product/product-description';
import { HIDDEN_PRODUCT_TAG } from 'lib/constants';
import { getProduct, getProductRecommendations } from 'lib/shopify';
import { Image } from 'lib/shopify/types';
import Link from 'next/link';
import { Suspense } from 'react';

export async function generateMetadata(props: {
  params: Promise<{ handle: string }>;
}): Promise<Metadata> {
  const params = await props.params;
  const product = await getProduct(params.handle);

  if (!product) return notFound();

  const { url, width, height, altText: alt } = product.featuredImage || {};
  const indexable = !product.tags.includes(HIDDEN_PRODUCT_TAG);

  return {
    title: product.seo.title || product.title,
    description: product.seo.description || product.description,
    robots: {
      index: indexable,
      follow: indexable,
      googleBot: {
        index: indexable,
        follow: indexable
      }
    },
    openGraph: url
      ? {
          images: [
            {
              url,
              width,
              height,
              alt
            }
          ]
        }
      : null
  };
}

export default async function ProductPage(props: { params: Promise<{ handle: string }> }) {
  const params = await props.params;
  const product = await getProduct(params.handle);

  if (!product) return notFound();

  const productJsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.title,
    description: product.description,
    image: product.featuredImage.url,
    offers: {
      '@type': 'AggregateOffer',
      availability: product.availableForSale
        ? 'https://schema.org/InStock'
        : 'https://schema.org/OutOfStock',
      priceCurrency: product.priceRange.minVariantPrice.currencyCode,
      highPrice: product.priceRange.maxVariantPrice.amount,
      lowPrice: product.priceRange.minVariantPrice.amount
    }
  };

  return (
    <ProductProvider>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(productJsonLd)
        }}
      />
      <div className="mx-auto max-w-(--breakpoint-2xl) px-4">
        <div className="flex flex-col rounded-lg border border-neutral-200 bg-white p-8 md:p-12 lg:flex-row lg:gap-8 dark:border-neutral-800 dark:bg-black">
          <div className="h-full w-full basis-full lg:basis-4/6">
            <Suspense
              fallback={
                <div className="relative aspect-square h-full max-h-[550px] w-full overflow-hidden" />
              }
            >
              <Gallery
                images={product.images.slice(0, 5).map((image: Image) => ({
                  src: image.url,
                  altText: image.altText
                }))}
              />
            </Suspense>
          </div>

          <div className="basis-full lg:basis-2/6">
            <Suspense fallback={null}>
              <ProductDescription product={product} />
            </Suspense>
          </div>
        </div>
        <RelatedProducts id={product.id} />
      </div>
      <Footer />
    </ProductProvider>
  );
}

async function RelatedProducts({ id }: { id: string }) {
  const relatedProducts = await getProductRecommendations(id);

  if (!relatedProducts.length) return null;

  return (
    <div className="py-8">
      <h2 className="mb-4 text-2xl font-bold">Related Products</h2>
      <ul className="flex w-full gap-4 overflow-x-auto pt-1">
        {relatedProducts.map((product) => (
          <li
            key={product.handle}
            className="aspect-square w-full flex-none min-[475px]:w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/5"
          >
            <Link
              className="relative h-full w-full"
              href={`/product/${product.handle}`}
              prefetch={true}
            >
              <GridTileImage
                alt={product.title}
                label={{
                  title: product.title,
                  amount: product.priceRange.maxVariantPrice.amount,
                  currencyCode: product.priceRange.maxVariantPrice.currencyCode
                }}
                src={product.featuredImage?.url}
                fill
                sizes="(min-width: 1024px) 20vw, (min-width: 768px) 25vw, (min-width: 640px) 33vw, (min-width: 475px) 50vw, 100vw"
              />
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
}


# ======================
# File: app/policies/[policy]/page.tsx
# ======================

import Footer from "components/layout/footer/Footer";
import Prose from "components/prose";
import { getAllPolicies } from "lib/shopify"; // Only using this now
import type { Metadata } from "next";
import { notFound } from "next/navigation";

/**
 * Generates metadata for the policy page.
 */
export async function generateMetadata(
  context: { params: { policy: string } }
): Promise<Metadata> {
  const params = await Promise.resolve(context.params);

  if (!params || !params.policy) return notFound();

  const policies = await getAllPolicies();
  const page = policies.find((p) => p.handle === params.policy);

  if (!page) return notFound();

  return {
    title: page.title,
    description: page.body.substring(0, 160),
    openGraph: {
      type: "article",
    },
  };
}

export default async function PolicyPage(
  context: { params: { policy: string } }
) {
  const params = await Promise.resolve(context.params);
  if (!params?.policy) return notFound();

  const policies = await getAllPolicies();
  const page = policies.find((p) => p.handle === params.policy);

  if (!page) return notFound();

  return (
    <>
      <div className="w-full max-w-5xl mx-auto px-4 sm:px-6 md:px-8 lg:px-10 xl:px-12 py-16">
        <h1 className="text-5xl font-bold mb-8 text-gray-900 dark:text-white">
          {page.title}
        </h1>
        <Prose
          className="mb-10 text-gray-700 dark:text-gray-300 leading-relaxed"
          html={page.body}
        />
      </div>
      <Footer />
    </>
  );
}

# ======================
# File: app/search/layout.tsx
# ======================

import Footer from 'components/layout/footer/Footer';
import Collections from 'components/layout/search/collections';
import FilterList from 'components/layout/search/filter';
import { sorting } from 'lib/constants';
import { Suspense } from 'react';
import ChildrenWrapper from './children-wrapper';

export default function SearchLayout({
  children
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <div className="mx-auto flex max-w-(--breakpoint-2xl) flex-col gap-8 px-4 pb-4 text-black md:flex-row dark:text-white">
        <div className="order-first w-full flex-none md:max-w-[125px]">
          <Collections />
        </div>
        <div className="order-last min-h-screen w-full md:order-none">
          <Suspense fallback={null}>
            <ChildrenWrapper>{children}</ChildrenWrapper>
          </Suspense>
        </div>
        <div className="order-none flex-none md:order-last md:w-[125px]">
          <FilterList list={sorting} title="Sort by" />
        </div>
      </div>
      <Footer />
    </>
  );
}


# ======================
# File: app/search/children-wrapper.tsx
# ======================

'use client';

import { useSearchParams } from 'next/navigation';
import { Fragment } from 'react';

// Ensure children are re-rendered when the search query changes
export default function ChildrenWrapper({ children }: { children: React.ReactNode }) {
  const searchParams = useSearchParams();
  return <Fragment key={searchParams.get('q')}>{children}</Fragment>;
}


# ======================
# File: app/search/loading.tsx
# ======================

import Grid from 'components/grid';

export default function Loading() {
  return (
    <>
      <div className="mb-4 h-6" />
      <Grid className="grid-cols-2 lg:grid-cols-3">
        {Array(12)
          .fill(0)
          .map((_, index) => {
            return (
              <Grid.Item key={index} className="animate-pulse bg-neutral-100 dark:bg-neutral-800" />
            );
          })}
      </Grid>
    </>
  );
}


# ======================
# File: app/search/page.tsx
# ======================

import Grid from 'components/grid';
import ProductGridItems from 'components/layout/product-grid-items';
import { defaultSort, sorting } from 'lib/constants';
import { getProducts } from 'lib/shopify';

export const metadata = {
  title: 'Search',
  description: 'Search for products in the store.'
};

export default async function SearchPage(props: {
  searchParams?: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const searchParams = await props.searchParams;
  const { sort, q: searchValue } = searchParams as { [key: string]: string };
  const { sortKey, reverse } = sorting.find((item) => item.slug === sort) || defaultSort;

  const products = await getProducts({ sortKey, reverse, query: searchValue });
  const resultsText = products.length > 1 ? 'results' : 'result';

  return (
    <>
      {searchValue ? (
        <p className="mb-4">
          {products.length === 0
            ? 'There are no products that match '
            : `Showing ${products.length} ${resultsText} for `}
          <span className="font-bold">&quot;{searchValue}&quot;</span>
        </p>
      ) : null}
      {products.length > 0 ? (
        <Grid className="grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
          <ProductGridItems products={products} />
        </Grid>
      ) : null}
    </>
  );
}


# ======================
# File: app/search/[collection]/opengraph-image.tsx
# ======================

import OpengraphImage from 'components/opengraph-image';
import { getCollection } from 'lib/shopify';

export default async function Image({
  params
}: {
  params: { collection: string };
}) {
  const collection = await getCollection(params.collection);
  const title = collection?.seo?.title || collection?.title;

  return await OpengraphImage({ title });
}


# ======================
# File: app/search/[collection]/page.tsx
# ======================

import { getCollection, getCollectionProducts } from 'lib/shopify';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';

import Grid from 'components/grid';
import ProductGridItems from 'components/layout/product-grid-items';
import { defaultSort, sorting } from 'lib/constants';

export async function generateMetadata(props: {
  params: Promise<{ collection: string }>;
}): Promise<Metadata> {
  const params = await props.params;
  const collection = await getCollection(params.collection);

  if (!collection) return notFound();

  return {
    title: collection.seo?.title || collection.title,
    description:
      collection.seo?.description || collection.description || `${collection.title} products`
  };
}

export default async function CategoryPage(props: {
  params: Promise<{ collection: string }>;
  searchParams?: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const searchParams = await props.searchParams;
  const params = await props.params;
  const { sort } = searchParams as { [key: string]: string };
  const { sortKey, reverse } = sorting.find((item) => item.slug === sort) || defaultSort;
  const products = await getCollectionProducts({ collection: params.collection, sortKey, reverse });

  return (
    <section>
      {products.length === 0 ? (
        <p className="py-3 text-lg">{`No products found in this collection`}</p>
      ) : (
        <Grid className="grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
          <ProductGridItems products={products} />
        </Grid>
      )}
    </section>
  );
}


# ======================
# File: app/[page]/opengraph-image.tsx
# ======================

import OpengraphImage from 'components/opengraph-image';
import { getPage } from 'lib/shopify';

export default async function Image({ params }: { params: { page: string } }) {
  const page = await getPage(params.page);
  const title = page.seo?.title || page.title;

  return await OpengraphImage({ title });
}


# ======================
# File: app/[page]/layout.tsx
# ======================

import Footer from 'components/layout/footer/Footer';

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <div className="w-full">
        <div className="mx-8 max-w-2xl py-20 sm:mx-auto">{children}</div>
      </div>
      <Footer />
    </>
  );
}


# ======================
# File: app/[page]/page.tsx
# ======================

import type { Metadata } from 'next';

import Footer from 'components/layout/footer/Footer';
import Prose from 'components/prose';
import { getPage } from 'lib/shopify';
import { notFound } from 'next/navigation';

export async function generateMetadata(props: {
  params: Promise<{ page: string }>;
}): Promise<Metadata> {
  const params = await props.params;
  const page = await getPage(params.page);

  if (!page) return notFound();

  return {
    title: page.seo?.title || page.title,
    description: page.seo?.description || page.bodySummary,
    openGraph: {
      publishedTime: page.createdAt,
      modifiedTime: page.updatedAt,
      type: 'article'
    }
  };
}

export default async function Page(props: { params: Promise<{ page: string }> }) {
  const params = await props.params;
  const page = await getPage(params.page);
  if (!page) return notFound();

  return (
    <>
      <h1 className="mb-8 text-5xl font-bold">{page.title}</h1>
      <Prose className="mb-8" html={page.body} />
      <p className="text-sm italic">
        {`This document was last updated on ${new Intl.DateTimeFormat(undefined, {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }).format(new Date(page.updatedAt))}.`}
      </p>
      <Footer />
    </>
  );
}


# ======================
# File: app/api/subscribe/route.ts
# ======================

// app/api/subscribe/route.ts
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const { email } = await request.json();
    if (!email) {
      return NextResponse.json({ error: "Email is required" }, { status: 400 });
    }

    const SHOPIFY_STORE_DOMAIN = process.env.SHOPIFY_STORE_DOMAIN;
    const ADMIN_API_ACCESS_TOKEN = process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN;

    // Search for existing customer
    const searchRes = await fetch(
      `https://${SHOPIFY_STORE_DOMAIN}/admin/api/2022-10/customers/search.json?query=email:${email}`,
      {
        headers: {
          "Content-Type": "application/json",
          "X-Shopify-Access-Token": ADMIN_API_ACCESS_TOKEN!,
        },
      }
    );

    const searchData = await searchRes.json();
    let customerId;

    if (searchData.customers && searchData.customers.length > 0) {
      customerId = searchData.customers[0].id;
      const updateRes = await fetch(
        `https://${SHOPIFY_STORE_DOMAIN}/admin/api/2022-10/customers/${customerId}.json`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "X-Shopify-Access-Token": ADMIN_API_ACCESS_TOKEN!,
          },
          body: JSON.stringify({
            customer: { id: customerId, accepts_marketing: true },
          }),
        }
      );
      if (!updateRes.ok) {
        const updateError = await updateRes.text();
        console.error("Update error:", updateRes.status, updateError);
        return NextResponse.json({ error: updateError }, { status: updateRes.status });
      }
    } else {
      const createRes = await fetch(
        `https://${SHOPIFY_STORE_DOMAIN}/admin/api/2022-10/customers.json`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Shopify-Access-Token": ADMIN_API_ACCESS_TOKEN!,
          },
          body: JSON.stringify({
            customer: { email, accepts_marketing: true },
          }),
        }
      );
      if (!createRes.ok) {
        const createError = await createRes.text();
        console.error("Create error:", createRes.status, createError);
        return NextResponse.json({ error: createError }, { status: createRes.status });
      }
      const createData = await createRes.json();
      customerId = createData.customer?.id;
    }

    return NextResponse.json({ success: true, customerId });
  } catch (error) {
    console.error("Subscribe error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}


# ======================
# File: app/api/revalidate/route.ts
# ======================

import { revalidate } from 'lib/shopify';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest): Promise<NextResponse> {
  return revalidate(req);
}


# ======================
# File: components/prose.tsx
# ======================

import clsx from 'clsx';

const Prose = ({ html, className }: { html: string; className?: string }) => {
  return (
    <div
      className={clsx(
        'prose mx-auto max-w-6xl text-base leading-7 text-black prose-headings:mt-8 prose-headings:font-semibold prose-headings:tracking-wide prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg prose-a:text-black prose-a:underline prose-a:hover:text-neutral-300 prose-strong:text-black prose-ol:mt-8 prose-ol:list-decimal prose-ol:pl-6 prose-ul:mt-8 prose-ul:list-disc prose-ul:pl-6 dark:text-white dark:prose-headings:text-white dark:prose-a:text-white dark:prose-strong:text-white',
        className
      )}
      dangerouslySetInnerHTML={{ __html: html }}
    />
  );
};

export default Prose;


# ======================
# File: components/logo-square.tsx
# ======================

import clsx from 'clsx';
import LogoIcon from './icons/logo';

export default function LogoSquare({ size }: { size?: 'sm' | undefined }) {
  return (
    <div
      className={clsx(
        'flex flex-none items-center justify-center border border-neutral-200 bg-white dark:border-neutral-700 dark:bg-black',
        {
          'h-[40px] w-[40px] rounded-xl': !size,
          'h-[30px] w-[30px] rounded-lg': size === 'sm'
        }
      )}
    >
      <LogoIcon
        className={clsx({
          'h-[16px] w-[16px]': !size,
          'h-[10px] w-[10px]': size === 'sm'
        })}
      />
    </div>
  );
}


# ======================
# File: components/opengraph-image.tsx
# ======================

import { ImageResponse } from 'next/og';
import LogoIcon from './icons/logo';
import { join } from 'path';
import { readFile } from 'fs/promises';

export type Props = {
  title?: string;
};

export default async function OpengraphImage(
  props?: Props
): Promise<ImageResponse> {
  const { title } = {
    ...{
      title: process.env.SITE_NAME
    },
    ...props
  };

  const file = await readFile(join(process.cwd(), './fonts/Inter-Bold.ttf'));
  const font = Uint8Array.from(file).buffer;

  return new ImageResponse(
    (
      <div tw="flex h-full w-full flex-col items-center justify-center bg-black">
        <div tw="flex flex-none items-center justify-center border border-neutral-700 h-[160px] w-[160px] rounded-3xl">
          <LogoIcon width="64" height="58" fill="white" />
        </div>
        <p tw="mt-12 text-6xl font-bold text-white">{title}</p>
      </div>
    ),
    {
      width: 1200,
      height: 630,
      fonts: [
        {
          name: 'Inter',
          data: font,
          style: 'normal',
          weight: 700
        }
      ]
    }
  );
}


# ======================
# File: components/label.tsx
# ======================

import clsx from 'clsx';
import Price from './price';

const Label = ({
  title,
  amount,
  currencyCode,
  position = 'bottom'
}: {
  title: string;
  amount: string;
  currencyCode: string;
  position?: 'bottom' | 'center';
}) => {
  return (
    <div
      className={clsx('absolute bottom-0 left-0 flex w-full px-4 pb-4 @container/label', {
        'lg:px-20 lg:pb-[35%]': position === 'center'
      })}
    >
      <div className="flex items-center rounded-full border bg-white/70 p-1 text-xs font-semibold text-black backdrop-blur-md dark:border-neutral-800 dark:bg-black/70 dark:text-white">
        <h3 className="mr-4 line-clamp-2 grow pl-2 leading-none tracking-tight">{title}</h3>
        <Price
          className="flex-none rounded-full bg-blue-600 p-2 text-white"
          amount={amount}
          currencyCode={currencyCode}
          currencyCodeClassName="hidden @[275px]/label:inline"
        />
      </div>
    </div>
  );
};

export default Label;


# ======================
# File: components/welcome-toast.tsx
# ======================

'use client';

import { useEffect } from 'react';
import { toast } from 'sonner';

export function WelcomeToast() {
  useEffect(() => {
    // ignore if screen height is too small
    if (window.innerHeight < 650) return;
    if (!document.cookie.includes('welcome-toast=2')) {
      toast('🛍️ Welcome to Next.js Commerce!', {
        id: 'welcome-toast',
        duration: Infinity,
        onDismiss: () => {
          document.cookie = 'welcome-toast=2; max-age=31536000; path=/';
        },
        description: (
          <>
            This is a high-performance, SSR storefront powered by Shopify, Next.js, and Vercel.{' '}
            <a
              href="https://vercel.com/templates/next.js/nextjs-commerce"
              className="text-blue-600 hover:underline"
              target="_blank"
            >
              Deploy your own
            </a>
            .
          </>
        )
      });
    }
  }, []);

  return null;
}


# ======================
# File: components/price.tsx
# ======================

import clsx from 'clsx';

const Price = ({
  amount,
  className,
  currencyCode = 'USD',
  currencyCodeClassName
}: {
  amount: string;
  className?: string;
  currencyCode: string;
  currencyCodeClassName?: string;
} & React.ComponentProps<'p'>) => (
  <p suppressHydrationWarning={true} className={className}>
    {`${new Intl.NumberFormat(undefined, {
      style: 'currency',
      currency: currencyCode,
      currencyDisplay: 'narrowSymbol'
    }).format(parseFloat(amount))}`}
    <span className={clsx('ml-1 inline', currencyCodeClassName)}>{`${currencyCode}`}</span>
  </p>
);

export default Price;


# ======================
# File: components/loading-dots.tsx
# ======================

import clsx from 'clsx';

const dots = 'mx-[1px] inline-block h-1 w-1 animate-blink rounded-md';

const LoadingDots = ({ className }: { className: string }) => {
  return (
    <span className="mx-2 inline-flex items-center">
      <span className={clsx(dots, className)} />
      <span className={clsx(dots, 'animation-delay-[200ms]', className)} />
      <span className={clsx(dots, 'animation-delay-[400ms]', className)} />
    </span>
  );
};

export default LoadingDots;


# ======================
# File: components/carousel.tsx
# ======================

import { getCollectionProducts } from 'lib/shopify';
import Link from 'next/link';
import { GridTileImage } from './grid/tile';

export async function Carousel() {
  // Collections that start with `hidden-*` are hidden from the search page.
  const products = await getCollectionProducts({ collection: 'diffuser' });

  if (!products?.length) return null;

  // Purposefully duplicating products to make the carousel loop and not run out of products on wide screens.
  const carouselProducts = [...products, ...products, ...products];

  return (
    <div className="w-full overflow-x-auto pb-6 pt-1">
      <ul className="flex animate-carousel gap-4">
        {carouselProducts.map((product, i) => (
          <li
            key={`${product.handle}${i}`}
            className="relative aspect-square h-[30vh] max-h-[275px] w-2/3 max-w-[475px] flex-none md:w-1/3"
          >
            <Link href={`/product/${product.handle}`} className="relative h-full w-full">
              <GridTileImage
                alt={product.title}
                label={{
                  title: product.title,
                  amount: product.priceRange.maxVariantPrice.amount,
                  currencyCode: product.priceRange.maxVariantPrice.currencyCode
                }}
                src={product.featuredImage?.url}
                fill
                sizes="(min-width: 1024px) 25vw, (min-width: 768px) 33vw, 50vw"
              />
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
}


# ======================
# File: components/layout/product-grid-items.tsx
# ======================

import Grid from 'components/grid';
import { GridTileImage } from 'components/grid/tile';
import { Product } from 'lib/shopify/types';
import Link from 'next/link';

export default function ProductGridItems({ products }: { products: Product[] }) {
  return (
    <>
      {products.map((product) => (
        <Grid.Item key={product.handle} className="animate-fadeIn">
          <Link
            className="relative inline-block h-full w-full"
            href={`/product/${product.handle}`}
            prefetch={true}
          >
            <GridTileImage
              alt={product.title}
              label={{
                title: product.title,
                amount: product.priceRange.maxVariantPrice.amount,
                currencyCode: product.priceRange.maxVariantPrice.currencyCode
              }}
              src={product.featuredImage?.url}
              fill
              sizes="(min-width: 768px) 33vw, (min-width: 640px) 50vw, 100vw"
            />
          </Link>
        </Grid.Item>
      ))}
    </>
  );
}


# ======================
# File: components/layout/navbar/index.tsx
# ======================

import { getMenu } from "lib/shopify";
import NavbarClient from "./components/NavbarClient";

const { NEXT_PUBLIC_COMPANY_NAME } = process.env;

export async function Navbar() {
  const menu = await getMenu("next-js-frontend-header-menu");

  return <NavbarClient menu={menu} companyName={NEXT_PUBLIC_COMPANY_NAME || "Your Company"} />;
}

# ======================
# File: components/layout/navbar/components/NavbarClient.tsx
# ======================

"use client";

import { alpha, AppBar, Box, Toolbar, Typography, useTheme } from "@mui/material";
import { keyframes } from "@mui/system";
import Link from "next/link";
import { useEffect, useState } from "react";

import CartModal from "components/cart/components/CartModal";
import useIsMobile from "components/hooks/useIsMobile";
import ThemeToggle from "components/theme/ThemeToggle";
import MobileMenu from "./MobileMenu";
import Search from "./Search";
import SideMenuToggle from "./SideMenuToggle";

interface PageData {
  title: string;
  path: string;
  isMobile: boolean;
}

interface MenuData {
  pages: Record<string, PageData>;
  deskTopMenu: string[];
  primaryMenu: string[];
  secondaryMenu: string[];
  footerMenu: {
    title: string;
    menu: string[];
  }[];
}

/* 
  Keyframes for a slower, more visible animation:
  - slideInFromLeft: background moves from 200% → 0% (left-to-right fill).
  - slideInFromRight: background moves from -200% → 0% (right-to-left fill).
*/
const slideInFromLeft = keyframes`
  0%   { background-position: 200% center; }
  100% { background-position: 0% center;   }
`;

const slideInFromRight = keyframes`
  0%   { background-position: -200% center; }
  100% { background-position: 0% center;     }
`;

export default function NavbarClient({ companyName }: { companyName: string }) {
  // Navbar visibility & scroll logic
  const [visible, setVisible] = useState(true);
  const [atTop, setAtTop] = useState(true);

  // Menu & Cart toggles
  const [menuOpen, setMenuOpen] = useState(false);
  const [cartOpen, setCartOpen] = useState(false);

  // Desktop menu items from JSON
  const [desktopItems, setDesktopItems] = useState<PageData[]>([]);

  const theme = useTheme();
  const isMobile = useIsMobile();

  /*
    Fetch menu data for desktop:
    - Maps 'deskTopMenu' keys to PageData objects in 'pages'
    - Filters out any that are "isMobile"
  */
  useEffect(() => {
    fetch("/data/menu/data.json")
      .then((res) => res.json())
      .then((data: MenuData) => {
        if (!data || !data.pages || !data.deskTopMenu) {
          console.error("Invalid menu data:", data);
          return;
        }
        const fetchedDesktopItems = data.deskTopMenu
          .map((key) => data.pages[key])
          .filter((item): item is PageData => item !== undefined && !item.isMobile);

        setDesktopItems(fetchedDesktopItems);
      })
      .catch((error) => console.error("Error fetching desktop menu:", error));
  }, []);

  /*
    Scroll logic:
    - Show/hide navbar on scroll
    - Track if user is at the top of the page
  */
  useEffect(() => {
    if (typeof window === "undefined") return;

    let lastScrollY = window.scrollY;
    let ticking = false;
    const scrollThreshold = 5;

    const handleScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;
          const scrollDiff = currentScrollY - lastScrollY;

          if (Math.abs(scrollDiff) > scrollThreshold) {
            const isScrollingUp = scrollDiff < 0;
            setAtTop(currentScrollY <= 30);
            setVisible(currentScrollY === 0 || isScrollingUp || currentScrollY < 30);
            lastScrollY = currentScrollY;
          }
          ticking = false;
        });
        ticking = true;
      }
    };

    setAtTop(window.scrollY === 0);

    window.addEventListener("scroll", handleScroll, { passive: true });
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // Toggle menu: close cart if opening menu
  const toggleMenu = () => {
    setMenuOpen((prev) => {
      if (!prev || cartOpen) setCartOpen(false);
      return !prev;
    });
  };

  // Toggle cart: close menu if opening cart
  const toggleCart = () => {
    setCartOpen((prev) => {
      if (!prev || menuOpen) setMenuOpen(false);
      return !prev;
    });
  };

  /*
    Determine final navbar background:

    1) Desktop:
       - If atTop => transparent
       - Else => rgba(0, 0, 0, 0.8)
       - (cartOpen does NOT force darker background if atTop)

    2) Mobile:
       - If menuOpen => animate left→right with rgba(0,0,0,0.8)
       - If cartOpen => animate right→left with rgba(0,0,0,0.8)
       - Else => if atTop => transparent, else => rgba(0,0,0,0.8)
  */

  // If we're on mobile and a drawer is open, animate:
  let backgroundGradient: string | undefined;
  let animation: string | undefined;

  if (isMobile) {
    if (menuOpen) {
      backgroundGradient = "linear-gradient(to right, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.8) 100%)";
      animation = `${slideInFromLeft} 1.2s ease-in-out forwards`; // Slower animation
    } else if (cartOpen) {
      backgroundGradient = "linear-gradient(to left, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.8) 100%)";
      animation = `${slideInFromRight} 1.2s ease-in-out forwards`; // Slower animation
    }
  }

  // Desktop fallback or mobile fallback if drawers not open
  // If atTop on desktop => transparent, else => black
  // If atTop on mobile => transparent, else => black
  const fallbackBgColor = atTop ? "rgba(0, 0, 0, 0)" : "rgba(0, 0, 0, 0.8)";

  return (
    <>
      <AppBar
        position="fixed"
        sx={{
          // Smooth transitions for motion
          transition: `
            transform 0.6s ease-in-out,
            background-color 0.6s ease-in-out,
            backdrop-filter 0.6s ease-in-out,
            box-shadow 0.6s ease-in-out
          `,
          transform: visible ? "translateY(0)" : "translateY(-100%)",

          // If gradient is defined (mobile + open drawer), use it; else fallback color
          background: backgroundGradient || fallbackBgColor,
          backgroundSize: (menuOpen || cartOpen) && isMobile ? "200% 100%" : undefined,
          backgroundPosition:
            menuOpen && isMobile
              ? "200% center"
              : cartOpen && isMobile
              ? "-200% center"
              : undefined,
          animation: animation || "none",

          // If menu/cart is open on mobile => remove blur/box-shadow
          // If desktop atTop => no blur, else blur; same for box-shadow
          backdropFilter: isMobile && (menuOpen || cartOpen)
            ? "none"
            : atTop
            ? "none"
            : "blur(8px)",
          boxShadow:
            isMobile && (menuOpen || cartOpen)
              ? "none"
              : atTop
              ? "none"
              : "0px 4px 12px rgba(0, 0, 0, 0.1)",
          borderBottom:
            isMobile && (menuOpen || cartOpen)
              ? "none"
              : atTop
              ? "none"
              : "1px solid rgba(255, 255, 255, 0.08)",
          minHeight: "48px",
        }}
      >
        <Toolbar
          sx={{
            display: "flex",
            alignItems: "center",
            height: 48,
            paddingX: 2,
          }}
        >
          {/* Left Section */}
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              justifyContent: "flex-start",
              flex: isMobile ? 0 : 1,
              gap: isMobile ? 1 : 2,
            }}
          >
            {/* Mobile Menu Toggle / Desktop Nav Links */}
            {isMobile ? (
              <SideMenuToggle
                isMobile={isMobile}
                menuOpen={menuOpen}
                cartOpen={cartOpen}
                toggleMenu={toggleMenu}
              />
            ) : (
              desktopItems.map((item) => (
                <Link
                  key={item.title}
                  href={item.path}
                  prefetch
                  style={{ textDecoration: "none" }}
                >
                  <Typography
                    variant="body1"
                    sx={{
                      fontFamily: '"Playfair Display", serif',
                      color: theme.palette.text.primary,
                      fontWeight: "medium",
                      fontSize: "0.875rem",
                      letterSpacing: "0.08em",
                      marginX: 0.6,
                      position: "relative",
                      transition: "color 0.2s ease-in-out",
                      "&:hover": {
                        color: alpha(theme.palette.text.primary, 0.8),
                      },
                      "&::after": {
                        content: '""',
                        position: "absolute",
                        left: "50%",
                        bottom: "-3px",
                        width: "0%",
                        height: "2px",
                        backgroundColor: alpha(theme.palette.text.primary, 0.6),
                        transition: "width 0.3s ease-in-out, left 0.3s ease-in-out",
                      },
                      "&:hover::after": {
                        width: "100%",
                        left: "0%",
                      },
                    }}
                  >
                    {item.title}
                  </Typography>
                </Link>
              ))
            )}
          </Box>

          {/* Center Section (Company Name / Logo) */}
          <Box
            sx={{
              flex: 1,
              display: "flex",
              alignItems: "center",
              justifyContent: "flex-start",
              transition: "flex 0.4s ease-in-out",
              pl: isMobile ? 1 : 0,
            }}
          >
            <Link
              href="/"
              prefetch
              style={{ textDecoration: "none" }}
              scroll={false}
            >
              <Typography
                variant="h6"
                sx={{
                  fontFamily: '"Playfair Display", serif',
                  fontWeight: 700,
                  letterSpacing: "0.07em",
                  textOverflow: "ellipsis",
                  whiteSpace: "nowrap",
                  overflow: "hidden",
                  fontSize: isMobile ? "1.1rem" : "1.7rem",
                  color: theme.palette.text.primary,
                  "&:hover": { opacity: 0.8 },
                }}
              >
                {companyName}
              </Typography>
            </Link>
          </Box>

          {/* Right Section */}
          <Box
            sx={{
              flex: 1,
              display: "flex",
              alignItems: "center",
              justifyContent: "flex-end",
              gap: 0,
            }}
          >
            <Search isMobile={isMobile} setMenuOpen={setMenuOpen} />
            <CartModal atTop={atTop} cartOpen={cartOpen} toggleCart={toggleCart} />
            {!isMobile && <ThemeToggle />}
          </Box>
        </Toolbar>
      </AppBar>

      {/* Mobile drawer menu */}
      <MobileMenu
        isOpen={menuOpen}
        setIsOpen={setMenuOpen}
        companyName={companyName}
        atTop={atTop}
      />
    </>
  );
}


# ======================
# File: components/layout/navbar/components/CartMenu.tsx
# ======================

"use client";

// import {
//   Backdrop,
//   Box,
//   Drawer,
//   useTheme
// } from "@mui/material";

// import CartContents from "components/cart/components/CartContents";
// import EmptyCart from "components/cart/components/EmptyCart";
// import useIsMobile from "components/hooks/useIsMobile";
// import { usePathname, useSearchParams } from "next/navigation";

// export default function CartMenu({ atTop, cartOpen, cart, toggleCart }: {
//   toggleCart: () => void;
//   cart: any;
//   cartOpen: boolean;
//   atTop: boolean;
// }) {
//   const isMobile = useIsMobile();
//   const pathname = usePathname();
//   const searchParams = useSearchParams();
//   const theme = useTheme();

//   return (
//     <>
//       <Backdrop
//         open={isMobile && cartOpen}
//         onClick={toggleCart}
//         sx={{
//           zIndex: 1099,
//           backgroundColor: "rgba(0, 0, 0, 0.01)",
//           backdropFilter: "blur(1px)",
//           transition: "opacity 0.3s ease-in-out",
//           position: "fixed",
//           left: 0,
//           width: "100vw",
//           height: "100vh",
//         }}
//       />

//       {/* ✅ Cart Drawer */}
//       <Drawer
//         anchor="right"
//         open={cartOpen}
//         onClose={toggleCart}
//         ModalProps={{ keepMounted: true }}
//         sx={{
//           zIndex: 1200,
//           "& .MuiDrawer-paper": {
//             width: isMobile ? "100%" : "40%",
//             maxWidth: "500px",
//             display: "flex",
//             height: isMobile ? "calc(100% - 48px)" : "100%",
//             marginTop: isMobile ? "48px" : "0px",
//             flexDirection: "column",
//             backgroundImage: "none !important",
//             backgroundColor: "rgba(0, 0, 0, 0.999)", // Dark cart menu
//             color: theme.palette.text.primary,
//             boxShadow: "-4px 0 10px rgba(0, 0, 0, 0.1)",
//             position: "fixed",
//             right: 0,
//             top: 0,
//             bottom: 0,
//           },
//         }}
//       >
//         <Box flex={1} p={2} display="flex" flexDirection="column">
//           {cart?.lines?.length > 0 ? <CartContents cart={cart} /> : <EmptyCart />}
//         </Box>
//       </Drawer>
//     </>
//   );
// }

// Code without backdrop but faster...
"use client";

import {
  Box,
  Drawer,
  useTheme
} from "@mui/material";

import CartContents from "components/cart/components/CartContents";
import CartHeader from "components/cart/components/CartHeader";
import EmptyCart from "components/cart/components/EmptyCart";
import useIsMobile from "components/hooks/useIsMobile";
import { usePathname, useSearchParams } from "next/navigation";

export default function CartMenu({ cartOpen, cart, toggleCart }: {
  toggleCart: () => void;
  cart: any;
  cartOpen: boolean;
  atTop: boolean;
}) {
  const isMobile = useIsMobile();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const theme = useTheme();

  // Close menu on route change
  // useEffect(() => {
  //   if (cartOpen) {
  //     setCartOpen(false);
  //   }
  // }, [pathname, searchParams]);

  return (
    <Drawer
      anchor="right"
      open={cartOpen}
      onClose={toggleCart}
      ModalProps={{ keepMounted: true }}
      BackdropProps={{ invisible: true }}
      sx={{
        "& .MuiDrawer-paper": {
          width: isMobile ? "100%" : "40%",
          maxWidth: "500px",
          display: "flex",
          height: isMobile ? "calc(100% - 48px)" : "100%",
          marginTop: isMobile ? "48px" : "0px",
          flexDirection: "column",
          backgroundImage: "none !important",
          backgroundColor: "rgba(0, 0, 0, 0.999)",
          color: theme.palette.text.primary,
          boxShadow: "-4px 0 10px rgba(0, 0, 0, 0.1)",
          position: "fixed",
          right: 0,
          top: 0,
          bottom: 0,
        },
      }}
    >
      <CartHeader/>
      <Box flex={1} p={2} display="flex" flexDirection="column">
        {cart?.lines?.length > 0 ? <CartContents /> : <EmptyCart />}
      </Box>

    </Drawer>
  );
}


# ======================
# File: components/layout/navbar/components/Search.tsx
# ======================

"use client";

import { Close as CloseIcon, Search as SearchIcon } from "@mui/icons-material";
import { Box, IconButton, InputBase, useTheme } from "@mui/material";
import { useEffect, useRef, useState } from "react";

interface SearchProps {
  alwaysExpanded?: boolean;
  autoFocus?: boolean;
  isMobile?: boolean;
  setMenuOpen?: (open: boolean) => void;
  width?: number | "100%";
}

export default function Search({
  alwaysExpanded = false,
  autoFocus = false,
  isMobile = false,
  setMenuOpen = () => { },
  width = 240,
}: SearchProps) {
  const theme = useTheme();
  const [expanded, setExpanded] = useState(alwaysExpanded);
  const inputRef = useRef<HTMLInputElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if ((expanded || autoFocus) && inputRef.current) {
      inputRef.current.focus();
    }
  }, [expanded, autoFocus]);

  useEffect(() => {
    if (alwaysExpanded || !expanded) return;

    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setExpanded(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [expanded, alwaysExpanded]);

  const handleOnClick = () => {
    if (isMobile) {
      setMenuOpen(true);
    } else {
      setExpanded((prev) => !prev);
    }
  };

  const handleClose = () => {
    if (!alwaysExpanded) {
      setExpanded(false);
    }
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === "Escape" && !alwaysExpanded) {
      setExpanded(false);
    } else if (event.key === "Enter" && inputRef.current?.value.trim()) {
      event.preventDefault(); // Prevent default form submission
      const query = inputRef.current.value.trim();
      window.location.href = `/search?q=${encodeURIComponent(query)}`; // Navigate to search results
    }
  };

  const isExpanded = expanded || alwaysExpanded;

  return (
    <Box
      ref={containerRef}
      sx={{
        position: "relative",
        display: "flex",
        alignItems: "center",
        width: isExpanded ? (isMobile ? "100%" : width) : 40,
        height: 36,
        borderRadius: "18px",
        border: isExpanded ? `1px solid ${theme.palette.divider}` : "none",
        backgroundColor: isExpanded ? theme.palette.background.paper : "transparent",
        ...(isExpanded && {
          backdropFilter: "blur(4px)",
          backgroundColor: theme.palette.mode === "dark"
            ? "rgba(30, 30, 30, 0.8)"
            : "rgba(255, 255, 255, 0.8)",
        }),
        transition: "all 0.3s ease-in-out",
        overflow: "hidden",
      }}
      onKeyDown={handleKeyDown}
    >
      {/* Search Icon Container */}
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          pl: 1,
          color: theme.palette.text.secondary,
        }}
      >
        {isExpanded ? (
          <SearchIcon fontSize="small" />
        ) : (
          <IconButton
            onClick={handleOnClick}
            size="small"
            sx={{
              p: 0.5,
              transition: "transform 0.2s ease-in-out",
              "&:hover": { transform: "scale(1.1)" },
            }}
            aria-label="Open search"
          >
            <SearchIcon fontSize="small" />
          </IconButton>
        )}
      </Box>

      {/* Input Field */}
      <InputBase
        inputRef={inputRef}
        placeholder="Search..."
        sx={{
          flex: 1,
          ml: 0.5,
          mr: 1,
          fontSize: isMobile ? "16px" : "0.875rem",
          color: theme.palette.text.primary,
          transition: "opacity 0.2s ease-in-out",
          opacity: isExpanded ? 1 : 0,
          width: isExpanded ? "100%" : 0,
          "& .MuiInputBase-input": {
            padding: "0 8px",
            border: "none",
            backgroundColor: "transparent",
            fontSize: isMobile ? "16px" : "0.875rem",
            "&::placeholder": {
              color: theme.palette.text.secondary,
              opacity: 0.7,
            },
            "&:focus": {
              outline: "none",
              boxShadow: "none",
              border: "none",
            },
          },
        }}
        inputProps={{
          "aria-label": "search",
          disabled: !isExpanded,
        }}
      />

      {/* Close Button */}
      {isExpanded && (
        <IconButton
          onClick={handleClose}
          size="small"
          sx={{
            p: 0.5,
            mr: 0.5,
            transition: "transform 0.2s ease-in-out",
            "&:hover": { transform: "scale(1.1)" },
          }}
          aria-label="Close search"
        >
          <CloseIcon sx={{ fontSize: "16px" }} />
        </IconButton>
      )}
    </Box>
  );
}

# ======================
# File: components/layout/navbar/components/SideMenuToggle.tsx
# ======================

import { Box, IconButton } from "@mui/material";
import LogoSquare from "components/logo-square";
import Link from "next/link";

export default function SideMenuToggle({ 
    isMobile, 
    cartOpen,
    menuOpen,
    toggleMenu
}: { 
    isMobile: boolean; 
    menuOpen: boolean;
    cartOpen: boolean;
    toggleMenu: () => void; 
}) {
    return (
        <>
            {isMobile ? (
                <IconButton
                    edge="start"
                    color="inherit"
                    aria-label="menu"
                    onClick={toggleMenu} // Calls toggleMenu directly
                    sx={{
                        width: 30,
                        height: 30,
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "center",
                        justifyContent: "center",
                        padding: 0,
                        margin: 0,
                        cursor: "pointer",
                        transition: "transform 0.3s ease-in-out",
                        "&:hover": { transform: "scale(1.05)" },
                    }}
                >
                    <Box
                        id="nav-icon1"
                        className={menuOpen || cartOpen ? "open" : ""}
                        sx={{
                            width: "18px", 
                            height: "12px",
                            position: "relative",
                            transition: "0.5s ease-in-out",
                            "& span": {
                                display: "block",
                                position: "absolute",
                                height: "2px", 
                                width: "100%",
                                backgroundColor: "white",
                                borderRadius: "2px",
                                opacity: 1,
                                transition: "0.25s ease-in-out",
                            },
                            "& span:nth-of-type(1)": {
                                top: 0,
                                transform: menuOpen || cartOpen ? "translateY(6px) rotate(45deg)" : "none",
                            },
                            "& span:nth-of-type(2)": {
                                top: "6px",
                                opacity: menuOpen || cartOpen ? 0 : 1, // Hide middle span
                                transform: menuOpen || cartOpen ? "translateX(-24px)" : "none",
                            },
                            "& span:nth-of-type(3)": {
                                top: "12px",
                                transform: menuOpen || cartOpen ? "translateY(-6px) rotate(-45deg)" : "none",
                            },
                        }}
                    >
                        <span></span>
                        <span></span>
                        <span></span>
                    </Box>
                </IconButton>
            ) : (
                <Link href="/" prefetch={true} style={{ display: "flex", alignItems: "center" }} scroll={false}>
                    <LogoSquare />
                </Link>
            )}
        </>
    );
}


# ======================
# File: components/layout/navbar/components/SearchSkeleton.tsx
# ======================

import { MagnifyingGlassIcon } from "@heroicons/react/24/outline";

export default function SearchSkeleton() {
  return (
    <form className="relative flex items-center">
      <div className="w-10 h-10 bg-gray-300 animate-pulse rounded-lg flex items-center justify-center">
        <MagnifyingGlassIcon className="w-5 h-5 text-gray-500" />
      </div>
    </form>
  );
}


# ======================
# File: components/layout/navbar/components/MobileMenu.tsx
# ======================

"use client";

import {
  Box,
  Divider,
  Drawer,
  List,
  ListItem,
  ListItemText,
  useTheme
} from "@mui/material";
import { alpha } from "@mui/material/styles";
import FooterBottomSection from "components/layout/footer/FooterBottomSection";
import ThemeToggle from "components/theme/ThemeToggle";
import Link from "next/link";
import { usePathname, useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import Search from "./Search";

interface PageData {
  title: string;
  path: string;
  isMobile: boolean;
}

interface MenuData {
  pages: Record<string, PageData>;
  primaryMenu: string[];
  secondaryMenu: string[];
}

export default function MobileMenu({
  isOpen,
  setIsOpen,
  companyName,
  atTop
}: {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
  companyName: string;
  atTop: boolean;
}) {
  const [primaryMenu, setPrimaryMenu] = useState<PageData[]>([]);
  const [secondaryMenu, setSecondaryMenu] = useState<PageData[]>([]);

  const pathname = usePathname();
  const searchParams = useSearchParams();
  const theme = useTheme();

  // Fetch menu data from JSON
  useEffect(() => {
    fetch("/data/menu/data.json")
      .then((res) => res.json())
      .then((data: MenuData) => {
        if (!data || !data.pages || !data.primaryMenu || !data.secondaryMenu) {
          console.error("Invalid menu data:", data);
          return;
        }

        // Ensure only valid menu items are stored
        setPrimaryMenu(
          data.primaryMenu
            .map((key) => data.pages[key])
            .filter((item): item is PageData => item !== undefined)
        );

        setSecondaryMenu(
          data.secondaryMenu
            .map((key) => data.pages[key])
            .filter((item): item is PageData => item !== undefined)
            .sort((a, b) => a.title.localeCompare(b.title)) 
        );
      })
      .catch((error) => console.error("Error fetching menu data:", error));
  }, []);

  // Close menu on route change
  useEffect(() => {
    if (isOpen) {
      setIsOpen(false);
    }
  }, [pathname, searchParams]);

  return (
    <Drawer
      anchor="left"
      open={isOpen}
      onClose={() => setIsOpen(false)}
      ModalProps={{ keepMounted: true }}
      BackdropProps={{ invisible: true }}
      sx={{
        "& .MuiDrawer-paper": {
          width: "100%",
          display: "flex",
          height: "calc(100% - 48px)",
          marginTop: "48px",
          flexDirection: "column",
          backgroundImage: "none !important",
          backgroundColor: atTop
            ? "rgba(0, 0, 0, 0.8)"
            : alpha(theme.palette.background.default, 0.93),
          color: theme.palette.text.primary,
          boxShadow: "4px 0 10px rgba(0, 0, 0, 0.1)",
          position: "relative",
          backdropFilter: "blur(10px)", // Optional: Adds a frosted glass effect
        }
      }}
    >
      <Box
        px={2}
        py={1}
        display="flex"
        justifyContent="space-between"
        alignItems="center"
      >
        <Search alwaysExpanded width="100%" />
        <ThemeToggle />
      </Box>

      {/* Primary Menu Items */}
      <Box sx={{ flexGrow: 1, overflowY: "auto", px: 2 }}>
        <List>
          {primaryMenu.map((item) => (
            <ListItem
              key={item.title}
              component={Link}
              href={item.path}
              onClick={() => setIsOpen(false)}
              sx={{
                "&:hover": { backgroundColor: theme.palette.action.hover },
                px: 0
              }}
            >
              <ListItemText
                primary={item.title}
                sx={{
                  fontWeight: "medium",
                  textAlign: "left",
                  fontSize: "1.2rem"
                }}
              />
            </ListItem>
          ))}
        </List>

        {/* Divider Between Primary and Secondary Menu */}
        {secondaryMenu.length > 0 && (
          <Divider
            sx={{
              my: 2,
              width: "100%",
              borderBottomWidth: "2px",
              borderColor:
                theme.palette.mode === "dark"
                  ? "rgba(255, 255, 255, 0.2)"
                  : "rgba(0, 0, 0, 0.1)",
              mx: "auto"
            }}
          />
        )}

        {/* Secondary Menu Items */}
        <List>
          {secondaryMenu.map((item) => (
            <ListItem
              key={item.title}
              component={Link}
              href={item.path}
              onClick={() => setIsOpen(false)}
              sx={{
                "&:hover": { backgroundColor: theme.palette.action.hover },
                px: 0
              }}
            >
              <ListItemText
                primary={item.title}
                sx={{
                  fontWeight: "medium",
                  textAlign: "left",
                  fontSize: "1.2rem"
                }}
              />
            </ListItem>
          ))}
        </List>
      </Box>

      {/* Footer */}
      <Box sx={{ width: "100%", mt: "auto", pb: 0, mb: 0 }}>
        <FooterBottomSection
          companyName={companyName}
          displayYear={new Date().getFullYear()}
          sizeInRem={0.8}
        />
      </Box>
    </Drawer>
  );
}


# ======================
# File: components/layout/footer/FooterSocialIcons.tsx
# ======================

"use client";

import { Box, IconButton } from "@mui/material";
import { useEffect, useState } from "react";
import { FaFacebookF, FaInstagram, FaTiktok } from "react-icons/fa6";

// Map social names to MUI icons
const iconMap: Record<string, JSX.Element> = {
  Facebook: <FaFacebookF />,
  Instagram: <FaInstagram />,
  TikTok: <FaTiktok />
};

interface SocialLink {
  name: string;
  url: string;
}

export default function FooterSocialIcons({ sizeInRem = 1.2 }: { sizeInRem?: number }) {
  const [socialLinks, setSocialLinks] = useState<SocialLink[]>([]);

  useEffect(() => {
    fetch("/data/socials/data.json")
      .then((res) => res.json())
      .then((data: SocialLink[]) => setSocialLinks(data))
      .catch((error) => console.error("Error fetching social links:", error));
  }, []);

  if (socialLinks.length === 0) return null; // Prevent rendering empty component

  return (
    <Box display="flex" alignItems="center" gap={0.5} mt={0.5}>
      {socialLinks.map((social, i) => {
        const IconComponent = iconMap[social.name];

        return (
          <IconButton
            key={i}
            component="a"
            href={social.url}
            target="_blank"
            rel="noopener noreferrer"
            aria-label={social.name}
            sx={{ color: "inherit", fontSize: `${sizeInRem}rem`, padding: "4px" }}
          >
            {IconComponent && <Box sx={{ fontSize: `${sizeInRem}rem` }}>{IconComponent}</Box>}
          </IconButton>
        );
      })}
    </Box>
  );
}


# ======================
# File: components/layout/footer/Footer.tsx
# ======================

"use client";

import { useEffect, useState } from "react";
import FooterBottomSection from "./FooterBottomSection";
import FooterTopSection from "./FooterTopSection";

interface PageData {
  title: string;
  path: string;
}

interface FooterMenu {
  title: string;
  menu: string[];
}

interface NavData {
  pages: Record<string, PageData>;
  footerMenu: FooterMenu[];
}

export default function Footer() {
  const [navData, setNavData] = useState<{ columns: { title: string; menu: PageData[] }[] } | null>(null);

  useEffect(() => {
    fetch("/data/menu/data.json")
      .then((res) => res.json())
      .then((data: NavData) => {
        if (!data || !data.footerMenu || !data.pages) {
          console.error("Invalid footer data format:", data);
          return;
        }

        // Convert menu keys to full menu objects, ensuring valid keys exist
        const formattedColumns = data.footerMenu.map((section) => ({
          title: section.title,
          menu: section.menu
            .map((key) => data.pages[key]) // Replace key with actual data
            .filter((item) => item !== undefined) // Ensure only valid items are included
            .sort((a, b) => a.title.localeCompare(b.title)) // Sort alphabetically by title
        }));

        setNavData({ columns: formattedColumns });
      })
      .catch((error) => console.error("Error fetching navigation data:", error));
  }, []);

  if (!navData) return null; // Prevent rendering if data isn't loaded

  return (
    <footer className="bg-black text-white">
      {/* Upper portion of the footer: logo, subscribe, menu columns, social icons */}
      <FooterTopSection columns={navData.columns} />

      {/* Bottom portion of the footer: copyright */}
      <FooterBottomSection
        companyName={process.env.NEXT_PUBLIC_COMPANY_NAME || process.env.SITE_NAME || ""}
        displayYear={new Date().getFullYear()}
      />
    </footer>
  );
}


# ======================
# File: components/layout/footer/FooterTopSection.tsx
# ======================

// components/layout/footer/FooterTopSection.tsx
import FooterColumns from "./components/FooterColumns";
import FooterLogoAndSubscribe from "./components/FooterLogoAndSubscribe";

export default function FooterTopSection({
  columns,
}: {
  columns: { title: string; menu: { title: string; path: string }[] }[];
}) {
  return (
    <div className="mx-auto max-w-7xl px-8 py-12 md:px-12 lg:px-16">
      {/* Desktop Layout */}
      <div className="hidden md:flex md:flex-row gap-8">
        {/* Left column: Company info, Title, and Subscribe Form */}
        <div className="md:w-1/3">
          <FooterLogoAndSubscribe />
        </div>
        {/* Right column: Footer Columns */}
        <div className="md:w-2/3">
          <FooterColumns columns={columns} />
        </div>
      </div>

      {/* Mobile Layout */}
      <div className="md:hidden">
        {/* Grid layout for mobile */}
        <div className="grid grid-cols-2 gap-6">
          {/* First row: Logo and Subscribe Form */}
          <div className="col-span-2">
            <FooterLogoAndSubscribe />
          </div>

          {/* Second row: Footer Columns */}
          <div className="col-span-2">
            <FooterColumns columns={columns} />
          </div>
        </div>
      </div>
    </div>
  );
}

# ======================
# File: components/layout/footer/FooterBottomSection.tsx
# ======================

import FooterSocialIcons from "./FooterSocialIcons";

export default function FooterBottomSection({
  companyName,
  displayYear,
  sizeInRem = 0.8,
}: {
  companyName: string;
  displayYear: string | number;
  sizeInRem?: number;
}) {
  return (
    <div className="border-t border-gray-600 py-4 text-xs text-gray-400">
      <div className="mx-auto flex max-w-7xl flex-row items-center justify-between gap-3 px-8 md:px-12 lg:px-16">
        <p className="font-light tracking-tight whitespace-nowrap">
          &copy; {displayYear} {companyName}
        </p>
        <FooterSocialIcons sizeInRem={sizeInRem} />
      </div>
    </div>
  );
}

# ======================
# File: components/layout/footer/components/FooterColumns.tsx
# ======================

import { Suspense } from "react";

export default function FooterColumns({
  columns,
}: {
  columns: { title: string; menu: { title: string; path: string }[] }[];
}) {
  // Sort columns alphabetically for desktop
  const sortedColumnsAlphabetically = [...columns].sort((a, b) =>
    a.title.localeCompare(b.title)
  );

  // Sort columns reverse alphabetically for mobile
  const sortedColumnsReverseAlphabetically = [...columns].sort((a, b) =>
    b.title.localeCompare(a.title)
  );

  return (
    <div className="flex flex-col md:flex-row md:justify-end gap-6 md:gap-10 items-center md:items-start text-center md:text-left">
      {/* Mobile: 2-column grid with reverse alphabetical order */}
      <div className="grid grid-cols-2 gap-6 w-full md:hidden">
        {sortedColumnsReverseAlphabetically.map((col) => (
          <div
            key={col.title}
            className="flex flex-col items-start space-y-3"
          >
            <h3 className="text-sm font-semibold uppercase tracking-wide text-gray-300">
              {col.title}
            </h3>
            <Suspense fallback={<div className="h-4 w-20 animate-pulse bg-gray-400" />}>
              <FooterMenu menu={col.menu} />
            </Suspense>
          </div>
        ))}
      </div>

      {/* Desktop: Flex layout with alphabetical order */}
      <div className="hidden md:flex md:flex-row md:gap-10">
        {sortedColumnsAlphabetically.map((col) => (
          <div
            key={col.title}
            className="flex flex-col items-start space-y-3"
          >
            <h3 className="text-sm font-semibold uppercase tracking-wide text-gray-300">
              {col.title}
            </h3>
            <Suspense fallback={<div className="h-4 w-20 animate-pulse bg-gray-400" />}>
              <FooterMenu menu={col.menu} />
            </Suspense>
          </div>
        ))}
      </div>
    </div>
  );
}

function FooterMenu({ menu }: { menu: { title: string; path: string }[] }) {
  return (
    <ul className="flex flex-col items-start space-y-2">
      {menu.map((item) => (
        <li key={item.title}>
          <a href={item.path} className="text-gray-400 hover:text-white transition-colors text-xs">
            {item.title}
          </a>
        </li>
      ))}
    </ul>
  );
}

# ======================
# File: components/layout/footer/components/FooterLogoAndSubscribe.tsx
# ======================

"use client";

import { ArrowForwardIos as ArrowIcon } from "@mui/icons-material";
import { Box, IconButton, InputAdornment, TextField, Typography } from "@mui/material";
import Link from "next/link";
import { useState } from "react";

export default function FooterLogoAndSubscribe() {
  const [email, setEmail] = useState("");
  const [status, setStatus] = useState<"idle" | "success" | "error">("idle");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const res = await fetch("/api/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      if (!res.ok) {
        throw new Error("Subscription failed");
      }

      const data = await res.json();

      setStatus("success");
      setEmail("");

      // Reset status after 3 seconds
      setTimeout(() => {
        setStatus("idle");
      }, 3000);
    } catch (error) {
      console.error("Subscription error:", error);
      setStatus("error");

      // Reset status after 3 seconds
      setTimeout(() => {
        setStatus("idle");
      }, 3000);
    }
  };

  return (
    <Box
      width="100%"
      display="flex"
      flexDirection="column"
      alignItems="flex-start" // Align items to the left
      textAlign="left" // Align text to the left
    >
      {/* Company Name */}
      <Link href="/" style={{ textDecoration: "none" }} scroll={false}>
        <Typography variant="h5" fontWeight="bold" letterSpacing="0.05em" color="text.primary">
          {process.env.NEXT_PUBLIC_COMPANY_NAME}
        </Typography>
      </Link>

      {/* Subtitle */}
      <Typography variant="body2" color="text.secondary" mt={1}>
        Stay updated with exclusive deals!
      </Typography>

      {/* Subscribe Form */}
      <Box component="form" onSubmit={handleSubmit} width="100%" maxWidth="400px" mt={2}>
        <TextField
          fullWidth
          type="email"
          variant="outlined"
          placeholder="Enter your email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconButton
                  type="submit"
                  color="inherit"
                  onClick={(e) => handleSubmit(e as any)} // Fix type issue
                  sx={{
                    p: "6px",
                    transition: "opacity 0.2s ease-in-out",
                    "&:hover": { opacity: 0.7 },
                  }}
                >
                  <ArrowIcon fontSize="small" sx={{ fontSize: "1rem", color: "text.secondary" }} />
                </IconButton>
              </InputAdornment>
            ),
          }}
          sx={{
            fontSize: "0.9rem",
            bgcolor: "background.paper", // Use theme's background.paper for consistency
            "& .MuiOutlinedInput-root": {
              "& fieldset": {
                borderColor: "rgba(255,255,255,0.1)", // Minimal border
                transition: "border-color 0.3s ease-in-out", // Smooth transition for border
              },
              "&:hover fieldset": {
                borderColor: "rgba(255,255,255,0.2)", // Slightly darker on hover
              },
              "&.Mui-focused fieldset": {
                borderColor: "primary.main", // Highlight on focus
              },
            },
            "& .MuiInputBase-input": {
              padding: "8px 12px", // Add padding for better spacing
              color: "text.primary",
            },
            width: "100%", // Ensure the input field spans the entire container
          }}
        />
      </Box>

      {/* Status Messages with Transition */}
      <Box
        sx={{
          mt: 1,
          height: "24px", // Fixed height to prevent layout shift
          overflow: "hidden",
        }}
      >
        <Typography
          variant="caption"
          color="success.main"
          sx={{
            opacity: status === "success" ? 1 : 0, // Fade in/out based on status
            transition: "opacity 0.3s ease-in-out", // Smooth transition
          }}
        >
          Subscription successful!
        </Typography>
        <Typography
          variant="caption"
          color="error.main"
          sx={{
            opacity: status === "error" ? 1 : 0, // Fade in/out based on status
            transition: "opacity 0.3s ease-in-out", // Smooth transition
          }}
        >
          Subscription failed. Please try again.
        </Typography>
      </Box>
    </Box>
  );
}

# ======================
# File: components/layout/search/collections.tsx
# ======================

import clsx from 'clsx';
import { Suspense } from 'react';

import { getCollections } from 'lib/shopify';
import FilterList from './filter';

async function CollectionList() {
  const collections = await getCollections();
  return <FilterList list={collections} title="Collections" />;
}

const skeleton = 'mb-3 h-4 w-5/6 animate-pulse rounded-sm';
const activeAndTitles = 'bg-neutral-800 dark:bg-neutral-300';
const items = 'bg-neutral-400 dark:bg-neutral-700';

export default function Collections() {
  return (
    <Suspense
      fallback={
        <div className="col-span-2 hidden h-[400px] w-full flex-none py-4 lg:block">
          <div className={clsx(skeleton, activeAndTitles)} />
          <div className={clsx(skeleton, activeAndTitles)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
          <div className={clsx(skeleton, items)} />
        </div>
      }
    >
      <CollectionList />
    </Suspense>
  );
}


# ======================
# File: components/layout/search/filter/index.tsx
# ======================

import { SortFilterItem } from 'lib/constants';
import { Suspense } from 'react';
import FilterItemDropdown from './dropdown';
import { FilterItem } from './item';

export type ListItem = SortFilterItem | PathFilterItem;
export type PathFilterItem = { title: string; path: string };

function FilterItemList({ list }: { list: ListItem[] }) {
  return (
    <>
      {list.map((item: ListItem, i) => (
        <FilterItem key={i} item={item} />
      ))}
    </>
  );
}

export default function FilterList({ list, title }: { list: ListItem[]; title?: string }) {
  return (
    <>
      <nav>
        {title ? (
          <h3 className="hidden text-xs text-neutral-500 md:block dark:text-neutral-400">
            {title}
          </h3>
        ) : null}
        <ul className="hidden md:block">
          <Suspense fallback={null}>
            <FilterItemList list={list} />
          </Suspense>
        </ul>
        <ul className="md:hidden">
          <Suspense fallback={null}>
            <FilterItemDropdown list={list} />
          </Suspense>
        </ul>
      </nav>
    </>
  );
}


# ======================
# File: components/layout/search/filter/item.tsx
# ======================

'use client';

import clsx from 'clsx';
import type { SortFilterItem } from 'lib/constants';
import { createUrl } from 'lib/utils';
import Link from 'next/link';
import { usePathname, useSearchParams } from 'next/navigation';
import type { ListItem, PathFilterItem } from '.';

function PathFilterItem({ item }: { item: PathFilterItem }) {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const active = pathname === item.path;
  const newParams = new URLSearchParams(searchParams.toString());
  const DynamicTag = active ? 'p' : Link;

  newParams.delete('q');

  return (
    <li className="mt-2 flex text-black dark:text-white" key={item.title}>
      <DynamicTag
        href={createUrl(item.path, newParams)}
        className={clsx(
          'w-full text-sm underline-offset-4 hover:underline dark:hover:text-neutral-100',
          {
            'underline underline-offset-4': active
          }
        )}
      >
        {item.title}
      </DynamicTag>
    </li>
  );
}

function SortFilterItem({ item }: { item: SortFilterItem }) {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const active = searchParams.get('sort') === item.slug;
  const q = searchParams.get('q');
  const href = createUrl(
    pathname,
    new URLSearchParams({
      ...(q && { q }),
      ...(item.slug && item.slug.length && { sort: item.slug })
    })
  );
  const DynamicTag = active ? 'p' : Link;

  return (
    <li className="mt-2 flex text-sm text-black dark:text-white" key={item.title}>
      <DynamicTag
        prefetch={!active ? false : undefined}
        href={href}
        className={clsx('w-full hover:underline hover:underline-offset-4', {
          'underline underline-offset-4': active
        })}
      >
        {item.title}
      </DynamicTag>
    </li>
  );
}

export function FilterItem({ item }: { item: ListItem }) {
  return 'path' in item ? <PathFilterItem item={item} /> : <SortFilterItem item={item} />;
}


# ======================
# File: components/layout/search/filter/dropdown.tsx
# ======================

'use client';

import { usePathname, useSearchParams } from 'next/navigation';
import { useEffect, useRef, useState } from 'react';

import { ChevronDownIcon } from '@heroicons/react/24/outline';
import type { ListItem } from '.';
import { FilterItem } from './item';

export default function FilterItemDropdown({ list }: { list: ListItem[] }) {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const [active, setActive] = useState('');
  const [openSelect, setOpenSelect] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setOpenSelect(false);
      }
    };

    window.addEventListener('click', handleClickOutside);
    return () => window.removeEventListener('click', handleClickOutside);
  }, []);

  useEffect(() => {
    list.forEach((listItem: ListItem) => {
      if (
        ('path' in listItem && pathname === listItem.path) ||
        ('slug' in listItem && searchParams.get('sort') === listItem.slug)
      ) {
        setActive(listItem.title);
      }
    });
  }, [pathname, list, searchParams]);

  return (
    <div className="relative" ref={ref}>
      <div
        onClick={() => {
          setOpenSelect(!openSelect);
        }}
        className="flex w-full items-center justify-between rounded-sm border border-black/30 px-4 py-2 text-sm dark:border-white/30"
      >
        <div>{active}</div>
        <ChevronDownIcon className="h-4" />
      </div>
      {openSelect && (
        <div
          onClick={() => {
            setOpenSelect(false);
          }}
          className="absolute z-40 w-full rounded-b-md bg-white p-4 shadow-md dark:bg-black"
        >
          {list.map((item: ListItem, i) => (
            <FilterItem key={i} item={item} />
          ))}
        </div>
      )}
    </div>
  );
}


# ======================
# File: components/layout/landingPage/LandingPage.tsx
# ======================

"use client";

import { Box, Button, Typography, useTheme } from "@mui/material";
import useIsMobile from "components/hooks/useIsMobile";
import { useEffect, useState } from "react";

// Define the TypeScript type for the JSON data
interface HeroContent {
    title: string;
    description: string;
    buttonText: string;
    buttonLink: string;
    imageUrl?: string; // Optional in case it's missing
}

export default function LandingPage() {
    const theme = useTheme();
    const isMobile = useIsMobile();

    // Define useState with the correct type
    const [heroContent, setHeroContent] = useState<HeroContent | null>(null);

    useEffect(() => {
        fetch("/data/landingPage/data.json")
            .then((response) => response.json())
            .then((data: HeroContent) => setHeroContent(data))
            .catch((error) => console.error("Error fetching hero content:", error));
    }, []);

    if (!heroContent) return null;

    return (
        <Box
            sx={{
                position: "relative",
                height: "80vh",
                width: "100%",
                overflow: "hidden",
            }}
        >
            {/* Background Image */}
            <Box
                sx={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    backgroundImage: `url('${heroContent.imageUrl || "/images/landingPage/image1.jpg"}')`,
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                    zIndex: -1,
                }}
            />

            {/* Subtle Dark Overlay */}
            <Box
                sx={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    background: "linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.2))",
                    zIndex: -1,
                }}
            />

            {/* Hero Section - Bottom-Left Alignment */}
            <Box
                sx={{
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "flex-end",
                    alignItems: "flex-start",
                    height: "100%",
                    padding: theme.spacing(4),
                    textAlign: "left",
                }}
            >
                <Typography
                    variant="h4"
                    sx={{
                        fontFamily: '"Playfair Display", serif',
                        fontSize: isMobile ? "1.4rem" : "2.3rem",
                        fontWeight: 700,
                        letterSpacing: isMobile ? "0.02rem" : "0.05rem",
                        color: "white",
                        marginBottom: 1.5,
                        textTransform: "none",
                    }}
                >
                    {heroContent.title}
                </Typography>

                <Typography
                    variant="body1"
                    sx={{
                        fontSize: isMobile ? "1rem" : "1.2rem",
                        fontWeight: 400,
                        fontStyle: "italic",
                        color: "rgba(255, 255, 255, 0.8)",
                        maxWidth: 600,
                        marginBottom: 3,
                    }}
                >
                    {heroContent.description}
                </Typography>
                <Button
                    sx={{
                        color: "#121212",
                        backgroundColor: "rgba(255, 255, 255, 0.88)",
                        fontSize: "0.85rem",
                        fontWeight: "500",
                        paddingX: 4,
                        paddingY: 1,
                        borderRadius: "36px", // Slightly more refined curves
                        textTransform: "none",
                        letterSpacing: "0.03rem",
                        boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.08)", // Subtle depth without overpowering
                        transition: "all 0.3s ease-in-out",
                        backdropFilter: "blur(8px)", // Soft diffusion effect
                        "&:hover": {
                            backgroundColor: "rgba(255, 255, 255, 0.95)", // Slightly more opaque on hover
                            boxShadow: "0px 6px 16px rgba(0, 0, 0, 0.12)", // A gentle lift effect
                            transform: "scale(1.03)", // Subtle interaction feedback
                        },
                    }}
                    href={heroContent.buttonLink}
                >
                    {heroContent.buttonText}
                </Button>

            </Box>
        </Box>
    );
}


# ======================
# File: components/layout/landingPage/LandingPageClient.tsx
# ======================

"use client";

import { usePathname } from "next/navigation";
import LandingPage from "./LandingPage";

export default function LandingPageClient() {
  const pathname = usePathname();
  const isHomePage = pathname === "/";
  return isHomePage ? <LandingPage /> : null;
}


# ======================
# File: components/product/gallery.tsx
# ======================

'use client';

import { ArrowLeftIcon, ArrowRightIcon } from '@heroicons/react/24/outline';
import { GridTileImage } from 'components/grid/tile';
import { useProduct, useUpdateURL } from 'components/product/product-context';
import Image from 'next/image';

export function Gallery({ images }: { images: { src: string; altText: string }[] }) {
  const { state, updateImage } = useProduct();
  const updateURL = useUpdateURL();
  const imageIndex = state.image ? parseInt(state.image) : 0;

  const nextImageIndex = imageIndex + 1 < images.length ? imageIndex + 1 : 0;
  const previousImageIndex = imageIndex === 0 ? images.length - 1 : imageIndex - 1;

  const buttonClassName =
    'h-full px-6 transition-all ease-in-out hover:scale-110 hover:text-black dark:hover:text-white flex items-center justify-center';

  return (
    <form>
      <div className="relative aspect-square h-full max-h-[550px] w-full overflow-hidden">
        {images[imageIndex] && (
          <Image
            className="h-full w-full object-contain"
            fill
            sizes="(min-width: 1024px) 66vw, 100vw"
            alt={images[imageIndex]?.altText as string}
            src={images[imageIndex]?.src as string}
            priority={true}
          />
        )}

        {images.length > 1 ? (
          <div className="absolute bottom-[15%] flex w-full justify-center">
            <div className="mx-auto flex h-11 items-center rounded-full border border-white bg-neutral-50/80 text-neutral-500 backdrop-blur-sm dark:border-black dark:bg-neutral-900/80">
              <button
                formAction={() => {
                  const newState = updateImage(previousImageIndex.toString());
                  updateURL(newState);
                }}
                aria-label="Previous product image"
                className={buttonClassName}
              >
                <ArrowLeftIcon className="h-5" />
              </button>
              <div className="mx-1 h-6 w-px bg-neutral-500"></div>
              <button
                formAction={() => {
                  const newState = updateImage(nextImageIndex.toString());
                  updateURL(newState);
                }}
                aria-label="Next product image"
                className={buttonClassName}
              >
                <ArrowRightIcon className="h-5" />
              </button>
            </div>
          </div>
        ) : null}
      </div>

      {images.length > 1 ? (
        <ul className="my-12 flex items-center flex-wrap justify-center gap-2 overflow-auto py-1 lg:mb-0">
          {images.map((image, index) => {
            const isActive = index === imageIndex;

            return (
              <li key={image.src} className="h-20 w-20">
                <button
                  formAction={() => {
                    const newState = updateImage(index.toString());
                    updateURL(newState);
                  }}
                  aria-label="Select product image"
                  className="h-full w-full"
                >
                  <GridTileImage
                    alt={image.altText}
                    src={image.src}
                    width={80}
                    height={80}
                    active={isActive}
                  />
                </button>
              </li>
            );
          })}
        </ul>
      ) : null}
    </form>
  );
}


# ======================
# File: components/product/product-description.tsx
# ======================

import { AddToCart } from 'components/cart/add-to-cart';
import Price from 'components/price';
import Prose from 'components/prose';
import { Product } from 'lib/shopify/types';
import { VariantSelector } from './variant-selector';

export function ProductDescription({ product }: { product: Product }) {
  return (
    <>
      <div className="mb-6 flex flex-col border-b pb-6 dark:border-neutral-700">
        <h1 className="mb-2 text-5xl font-medium">{product.title}</h1>
        <div className="mr-auto w-auto rounded-full bg-blue-600 p-2 text-sm text-white">
          <Price
            amount={product.priceRange.maxVariantPrice.amount}
            currencyCode={product.priceRange.maxVariantPrice.currencyCode}
          />
        </div>
      </div>
      <VariantSelector options={product.options} variants={product.variants} />
      {product.descriptionHtml ? (
        <Prose
          className="mb-6 text-sm leading-tight dark:text-white/[60%]"
          html={product.descriptionHtml}
        />
      ) : null}
      <AddToCart product={product} />
    </>
  );
}


# ======================
# File: components/product/variant-selector.tsx
# ======================

'use client';

import clsx from 'clsx';
import { useProduct, useUpdateURL } from 'components/product/product-context';
import { ProductOption, ProductVariant } from 'lib/shopify/types';

type Combination = {
  id: string;
  availableForSale: boolean;
  [key: string]: string | boolean;
};

export function VariantSelector({
  options,
  variants
}: {
  options: ProductOption[];
  variants: ProductVariant[];
}) {
  const { state, updateOption } = useProduct();
  const updateURL = useUpdateURL();
  const hasNoOptionsOrJustOneOption =
    !options.length || (options.length === 1 && options[0]?.values.length === 1);

  if (hasNoOptionsOrJustOneOption) {
    return null;
  }

  const combinations: Combination[] = variants.map((variant) => ({
    id: variant.id,
    availableForSale: variant.availableForSale,
    ...variant.selectedOptions.reduce(
      (accumulator, option) => ({ ...accumulator, [option.name.toLowerCase()]: option.value }),
      {}
    )
  }));

  return options.map((option) => (
    <form key={option.id}>
      <dl className="mb-8">
        <dt className="mb-4 text-sm uppercase tracking-wide">{option.name}</dt>
        <dd className="flex flex-wrap gap-3">
          {option.values.map((value) => {
            const optionNameLowerCase = option.name.toLowerCase();

            // Base option params on current selectedOptions so we can preserve any other param state.
            const optionParams = { ...state, [optionNameLowerCase]: value };

            // Filter out invalid options and check if the option combination is available for sale.
            const filtered = Object.entries(optionParams).filter(([key, value]) =>
              options.find(
                (option) => option.name.toLowerCase() === key && option.values.includes(value)
              )
            );
            const isAvailableForSale = combinations.find((combination) =>
              filtered.every(
                ([key, value]) => combination[key] === value && combination.availableForSale
              )
            );

            // The option is active if it's in the selected options.
            const isActive = state[optionNameLowerCase] === value;

            return (
              <button
                formAction={() => {
                  const newState = updateOption(optionNameLowerCase, value);
                  updateURL(newState);
                }}
                key={value}
                aria-disabled={!isAvailableForSale}
                disabled={!isAvailableForSale}
                title={`${option.name} ${value}${!isAvailableForSale ? ' (Out of Stock)' : ''}`}
                className={clsx(
                  'flex min-w-[48px] items-center justify-center rounded-full border bg-neutral-100 px-2 py-1 text-sm dark:border-neutral-800 dark:bg-neutral-900',
                  {
                    'cursor-default ring-2 ring-blue-600': isActive,
                    'ring-1 ring-transparent transition duration-300 ease-in-out hover:ring-blue-600':
                      !isActive && isAvailableForSale,
                    'relative z-10 cursor-not-allowed overflow-hidden bg-neutral-100 text-neutral-500 ring-1 ring-neutral-300 before:absolute before:inset-x-0 before:-z-10 before:h-px before:-rotate-45 before:bg-neutral-300 before:transition-transform dark:bg-neutral-900 dark:text-neutral-400 dark:ring-neutral-700 dark:before:bg-neutral-700':
                      !isAvailableForSale
                  }
                )}
              >
                {value}
              </button>
            );
          })}
        </dd>
      </dl>
    </form>
  ));
}


# ======================
# File: components/product/product-context.tsx
# ======================

'use client';

import { useRouter, useSearchParams } from 'next/navigation';
import React, { createContext, useContext, useMemo, useOptimistic } from 'react';

type ProductState = {
  [key: string]: string;
} & {
  image?: string;
};

type ProductContextType = {
  state: ProductState;
  updateOption: (name: string, value: string) => ProductState;
  updateImage: (index: string) => ProductState;
};

const ProductContext = createContext<ProductContextType | undefined>(undefined);

export function ProductProvider({ children }: { children: React.ReactNode }) {
  const searchParams = useSearchParams();

  const getInitialState = () => {
    const params: ProductState = {};
    for (const [key, value] of searchParams.entries()) {
      params[key] = value;
    }
    return params;
  };

  const [state, setOptimisticState] = useOptimistic(
    getInitialState(),
    (prevState: ProductState, update: ProductState) => ({
      ...prevState,
      ...update
    })
  );

  const updateOption = (name: string, value: string) => {
    const newState = { [name]: value };
    setOptimisticState(newState);
    return { ...state, ...newState };
  };

  const updateImage = (index: string) => {
    const newState = { image: index };
    setOptimisticState(newState);
    return { ...state, ...newState };
  };

  const value = useMemo(
    () => ({
      state,
      updateOption,
      updateImage
    }),
    [state]
  );

  return <ProductContext.Provider value={value}>{children}</ProductContext.Provider>;
}

export function useProduct() {
  const context = useContext(ProductContext);
  if (context === undefined) {
    throw new Error('useProduct must be used within a ProductProvider');
  }
  return context;
}

export function useUpdateURL() {
  const router = useRouter();

  return (state: ProductState) => {
    const newParams = new URLSearchParams(window.location.search);
    Object.entries(state).forEach(([key, value]) => {
      newParams.set(key, value);
    });
    router.push(`?${newParams.toString()}`, { scroll: false });
  };
}


# ======================
# File: components/theme/ThemeToggle.tsx
# ======================

"use client";

import { Brightness4, Brightness7 } from "@mui/icons-material"; // MUI Icons
import { IconButton } from "@mui/material";
import { useColorMode } from "theme/ThemeProvider"; // ✅ Hook to toggle dark/light mode
import { useThemeMode } from "theme/useThemeMode";

export default function ThemeToggle() {
  const { toggleColorMode } = useColorMode();
  const isDarkMode = useThemeMode();
  const shouldUse = false;

  return (
    <>
      {
        shouldUse &&
        <IconButton
          onClick={toggleColorMode}
          size="small"
          sx={{
            transition: "transform 0.2s ease-in-out",
            "&:hover": { transform: "scale(1.1)" }
          }}
        >
          {isDarkMode ? <Brightness7 fontSize="small" /> : <Brightness4 fontSize="small" />}
        </IconButton>
      }</>

  );
}


# ======================
# File: components/hooks/useIsMobile.ts
# ======================

import { useEffect, useState } from "react";

/**
 * Custom hook to detect if the screen size is mobile.
 * Returns `true` if the screen width is below 768px.
 */
export default function useIsMobile(breakpoint: number = 768): boolean {
    const [isMobile, setIsMobile] = useState(false);

    useEffect(() => {
        if (typeof window === "undefined") return;

        const checkScreenSize = () => setIsMobile(window.innerWidth < breakpoint);

        checkScreenSize(); // Run on mount
        window.addEventListener("resize", checkScreenSize);

        return () => window.removeEventListener("resize", checkScreenSize);
    }, [breakpoint]);

    return isMobile;
}


# ======================
# File: components/icons/logo.tsx
# ======================

import clsx from 'clsx';

export default function LogoIcon(props: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      aria-label={`logo`}
      viewBox="0 0 32 28"
      {...props}
      className={clsx('h-4 w-4 fill-black dark:fill-white', props.className)}
    >
      <path d="M21.5758 9.75769L16 0L0 28H11.6255L21.5758 9.75769Z" />
      <path d="M26.2381 17.9167L20.7382 28H32L26.2381 17.9167Z" />
    </svg>
  );
}


# ======================
# File: components/cart/edit-item-quantity-button.tsx
# ======================

'use client';

import { MinusIcon, PlusIcon } from '@heroicons/react/24/outline';
import clsx from 'clsx';
import { updateItemQuantity } from 'components/cart/actions';
import type { CartItem } from 'lib/shopify/types';
import { useActionState } from 'react';

function SubmitButton({ type }: { type: 'plus' | 'minus' }) {
  return (
    <button
      type="submit"
      aria-label={
        type === 'plus' ? 'Increase item quantity' : 'Reduce item quantity'
      }
      className={clsx(
        'ease flex h-full min-w-[36px] max-w-[36px] flex-none items-center justify-center rounded-full p-2 transition-all duration-200 hover:border-neutral-800 hover:opacity-80',
        {
          'ml-auto': type === 'minus'
        }
      )}
    >
      {type === 'plus' ? (
        <PlusIcon className="h-4 w-4 dark:text-neutral-500" />
      ) : (
        <MinusIcon className="h-4 w-4 dark:text-neutral-500" />
      )}
    </button>
  );
}

export function EditItemQuantityButton({
  item,
  type,
  optimisticUpdate
}: {
  item: CartItem;
  type: 'plus' | 'minus';
  optimisticUpdate: any;
}) {
  const [message, formAction] = useActionState(updateItemQuantity, null);
  const payload = {
    merchandiseId: item.merchandise.id,
    quantity: type === 'plus' ? item.quantity + 1 : item.quantity - 1
  };
  const updateItemQuantityAction = formAction.bind(null, payload);

  return (
    <form
      action={async () => {
        optimisticUpdate(payload.merchandiseId, type);
        updateItemQuantityAction();
      }}
    >
      <SubmitButton type={type} />
      <p aria-live="polite" className="sr-only" role="status">
        {message}
      </p>
    </form>
  );
}


# ======================
# File: components/cart/cart-context.tsx
# ======================

"use client";

import type {
  Cart,
  CartItem,
  Product,
  ProductVariant
} from "lib/shopify/types";
import React, {
  createContext,
  startTransition,
  use,
  useContext,
  useMemo,
  useOptimistic
} from "react";

/**
 * The 'UpdateType' determines how the user wants to update the cart item:
 *  - 'plus': Increase quantity by 1
 *  - 'minus': Decrease quantity by 1
 *  - 'delete': Remove the item entirely
 */
type UpdateType = "plus" | "minus" | "delete";

type CartAction =
  | {
      type: "UPDATE_ITEM";
      payload: { merchandiseId: string; updateType: UpdateType };
    }
  | {
      type: "ADD_ITEM";
      payload: { variant: ProductVariant; product: Product };
    };

/**
 * CartContextType is the shape of the data provided by CartContext.
 * In this example, we store a Promise of a Cart (or undefined) under cartPromise.
 */
type CartContextType = {
  cartPromise: Promise<Cart | undefined>;
};

const CartContext = createContext<CartContextType | undefined>(undefined);

/**
 * Utility function that recalculates the cost of the item by multiplying
 * the price by the new quantity.
 */
function calculateItemCost(quantity: number, price: string): string {
  return (Number(price) * quantity).toString();
}

/**
 * Updates a single cart item depending on the UpdateType (plus/minus/delete).
 * Returns the updated item or null if it should be removed.
 */
function updateCartItem(item: CartItem, updateType: UpdateType): CartItem | null {
  // If 'delete', remove the item
  if (updateType === "delete") return null;

  // If 'plus' or 'minus', adjust the quantity accordingly
  const newQuantity =
    updateType === "plus" ? item.quantity + 1 : item.quantity - 1;

  // If the quantity hits 0, remove the item
  if (newQuantity <= 0) return null;

  // Recalculate the cost
  const singleItemAmount =
    Number(item.cost.totalAmount.amount) / item.quantity;
  const newTotalAmount = calculateItemCost(
    newQuantity,
    singleItemAmount.toString()
  );

  return {
    ...item,
    quantity: newQuantity,
    cost: {
      ...item.cost,
      totalAmount: {
        ...item.cost.totalAmount,
        amount: newTotalAmount
      }
    }
  };
}

/**
 * Creates or updates a cart item (for 'ADD_ITEM').
 */
function createOrUpdateCartItem(
  existingItem: CartItem | undefined,
  variant: ProductVariant,
  product: Product
): CartItem {
  // If item exists, increment. Otherwise quantity = 1.
  const quantity = existingItem ? existingItem.quantity + 1 : 1;
  const totalAmount = calculateItemCost(quantity, variant.price.amount);

  return {
    // If it's an update, keep the existing ID
    id: existingItem?.id,
    quantity,
    cost: {
      totalAmount: {
        amount: totalAmount,
        currencyCode: variant.price.currencyCode
      }
    },
    merchandise: {
      id: variant.id,
      title: variant.title,
      selectedOptions: variant.selectedOptions,
      product: {
        id: product.id,
        handle: product.handle,
        title: product.title,
        featuredImage: product.featuredImage
      }
    }
  };
}

/**
 * Recalculates totalQuantity and totalAmount for the cart based on its lines.
 */
function updateCartTotals(lines: CartItem[]): Pick<Cart, "totalQuantity" | "cost"> {
  const totalQuantity = lines.reduce((sum, item) => sum + item.quantity, 0);
  const totalAmount = lines.reduce(
    (sum, item) => sum + Number(item.cost.totalAmount.amount),
    0
  );
  const currencyCode = lines[0]?.cost.totalAmount.currencyCode ?? "USD";

  return {
    totalQuantity,
    cost: {
      subtotalAmount: { amount: totalAmount.toString(), currencyCode },
      totalAmount: { amount: totalAmount.toString(), currencyCode },
      totalTaxAmount: { amount: "0", currencyCode }
    }
  };
}

/**
 * A helper to create a brand new, empty cart.
 */
function createEmptyCart(): Cart {
  return {
    id: undefined,
    checkoutUrl: "",
    totalQuantity: 0,
    lines: [],
    cost: {
      subtotalAmount: { amount: "0", currencyCode: "USD" },
      totalAmount: { amount: "0", currencyCode: "USD" },
      totalTaxAmount: { amount: "0", currencyCode: "USD" }
    }
  };
}

/**
 * cartReducer modifies the cart state based on each action.
 */
function cartReducer(state: Cart | undefined, action: CartAction): Cart {
  const currentCart = state || createEmptyCart();

  switch (action.type) {
    case "UPDATE_ITEM": {
      const { merchandiseId, updateType } = action.payload;
      // Update only the matching item
      const updatedLines = currentCart.lines
        .map((item) =>
          item.merchandise.id === merchandiseId
            ? updateCartItem(item, updateType)
            : item
        )
        // remove nulls (deleted items)
        .filter(Boolean) as CartItem[];

      // If cart is now empty, reset totalQuantity & totalAmount
      if (updatedLines.length === 0) {
        return {
          ...currentCart,
          lines: [],
          totalQuantity: 0,
          cost: {
            ...currentCart.cost,
            totalAmount: {
              ...currentCart.cost.totalAmount,
              amount: "0"
            }
          }
        };
      }

      console.log("Updated cart", currentCart);
      console.log("Updated lines", updatedLines);
      console.log("Updated Lines", updatedLines);
      return {
        ...currentCart,
        ...updateCartTotals(updatedLines),
        lines: updatedLines
      };
    }
    case "ADD_ITEM": {
      const { variant, product } = action.payload;

      const existingItem = currentCart.lines.find(
        (item) => item.merchandise.id === variant.id
      );

      const updatedItem = createOrUpdateCartItem(existingItem, variant, product);

      // if item is new, push it; otherwise map to update
      const updatedLines = existingItem
        ? currentCart.lines.map((item) =>
            item.merchandise.id === variant.id ? updatedItem : item
          )
        : [...currentCart.lines, updatedItem];

      return {
        ...currentCart,
        ...updateCartTotals(updatedLines),
        lines: updatedLines
      };
    }
    default:
      // If we get an unknown action, just return the current cart
      return currentCart;
  }
}

/**
 * The provider receives a Promise to a cart (from the server)
 * which is used as the initial cart state.
 */
export function CartProvider({
  children,
  cartPromise
}: {
  children: React.ReactNode;
  cartPromise: Promise<Cart | undefined>;
}) {
  return (
    <CartContext.Provider value={{ cartPromise }}>
      {children}
    </CartContext.Provider>
  );
}

/**
 * Exposes the current optimistic cart and the update methods.
 * The entire logic is wrapped with React's concurrency tools
 * so it doesn't complain about 'optimistic update outside a transition'.
 */
export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error("useCart must be used within a CartProvider");
  }

  // 'use()' will read from the cartPromise (server-provided)
  const initialCart = use(context.cartPromise);

  // 'useOptimistic' takes an initial state and a reducer
  const [optimisticCart, updateOptimisticCart] = useOptimistic(
    initialCart,
    cartReducer
  );

  /**
   * We wrap each dispatch in 'startTransition()' so React sees them as
   * concurrent transitions. This addresses the 'optimistic update' warnings.
   */
  const updateCartItem = (merchandiseId: string, updateType: UpdateType) => {
    startTransition(() => {
      updateOptimisticCart({
        type: "UPDATE_ITEM",
        payload: { merchandiseId, updateType }
      });
    });
  };

  const addCartItem = (variant: ProductVariant, product: Product) => {
    startTransition(() => {
      updateOptimisticCart({
        type: "ADD_ITEM",
        payload: { variant, product }
      });
    });
  };

  return useMemo(
    () => ({
      cart: optimisticCart,
      updateCartItem,
      addCartItem
    }),
    [optimisticCart]
  );
}


# ======================
# File: components/cart/actions.ts
# ======================

'use server';

import { TAGS } from 'lib/constants';
import {
  addToCart,
  createCart,
  getCart,
  removeFromCart,
  updateCart
} from 'lib/shopify';
import { revalidateTag } from 'next/cache';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';

export async function addItem(
  prevState: any,
  selectedVariantId: string | undefined
) {
  if (!selectedVariantId) {
    return 'Error adding item to cart';
  }

  try {
    await addToCart([{ merchandiseId: selectedVariantId, quantity: 1 }]);
    revalidateTag(TAGS.cart);
  } catch (e) {
    return 'Error adding item to cart';
  }
}

export async function removeItem(prevState: any, merchandiseId: string) {
  try {
    const cart = await getCart();

    if (!cart) {
      return 'Error fetching cart';
    }

    const lineItem = cart.lines.find(
      (line) => line.merchandise.id === merchandiseId
    );

    if (lineItem && lineItem.id) {
      await removeFromCart([lineItem.id]);
      revalidateTag(TAGS.cart);
    } else {
      return 'Item not found in cart';
    }
  } catch (e) {
    return 'Error removing item from cart';
  }
}

export async function updateItemQuantity(
  prevState: any,
  payload: {
    merchandiseId: string;
    quantity: number;
  }
) {
  const { merchandiseId, quantity } = payload;

  try {
    const cart = await getCart();

    if (!cart) {
      return 'Error fetching cart';
    }

    const lineItem = cart.lines.find(
      (line) => line.merchandise.id === merchandiseId
    );

    if (lineItem && lineItem.id) {
      if (quantity === 0) {
        await removeFromCart([lineItem.id]);
      } else {
        await updateCart([
          {
            id: lineItem.id,
            merchandiseId,
            quantity
          }
        ]);
      }
    } else if (quantity > 0) {
      // If the item doesn't exist in the cart and quantity > 0, add it
      await addToCart([{ merchandiseId, quantity }]);
    }

    revalidateTag(TAGS.cart);
  } catch (e) {
    console.error(e);
    return 'Error updating item quantity';
  }
}

export async function redirectToCheckout() {
  let cart = await getCart();
  redirect(cart!.checkoutUrl);
}

export async function createCartAndSetCookie() {
  let cart = await createCart();
  (await cookies()).set('cartId', cart.id!);
}


# ======================
# File: components/cart/delete-item-button.tsx
# ======================

'use client';

import { XMarkIcon } from '@heroicons/react/24/outline';
import { removeItem } from 'components/cart/actions';
import type { CartItem } from 'lib/shopify/types';
import { useActionState } from 'react';

export function DeleteItemButton({
  item,
  optimisticUpdate
}: {
  item: CartItem;
  optimisticUpdate: any;
}) {
  const [message, formAction] = useActionState(removeItem, null);
  const merchandiseId = item.merchandise.id;
  const removeItemAction = formAction.bind(null, merchandiseId);

  return (
    <form
      action={async () => {
        optimisticUpdate(merchandiseId, 'delete');
        removeItemAction();
      }}
    >
      <button
        type="submit"
        aria-label="Remove cart item"
        className="flex h-[24px] w-[24px] items-center justify-center rounded-full bg-neutral-500"
      >
        <XMarkIcon className="mx-[1px] h-4 w-4 text-white dark:text-black" />
      </button>
      <p aria-live="polite" className="sr-only" role="status">
        {message}
      </p>
    </form>
  );
}


# ======================
# File: components/cart/add-to-cart.tsx
# ======================

'use client';

import { PlusIcon } from '@heroicons/react/24/outline';
import clsx from 'clsx';
import { addItem } from 'components/cart/actions';
import { useProduct } from 'components/product/product-context';
import { Product, ProductVariant } from 'lib/shopify/types';
import { useActionState } from 'react';
import { useCart } from './cart-context';

function SubmitButton({
  availableForSale,
  selectedVariantId
}: {
  availableForSale: boolean;
  selectedVariantId: string | undefined;
}) {
  const buttonClasses =
    'relative flex w-full items-center justify-center rounded-full bg-blue-600 p-4 tracking-wide text-white';
  const disabledClasses = 'cursor-not-allowed opacity-60 hover:opacity-60';

  if (!availableForSale) {
    return (
      <button disabled className={clsx(buttonClasses, disabledClasses)}>
        Out Of Stock
      </button>
    );
  }

  if (!selectedVariantId) {
    return (
      <button
        aria-label="Please select an option"
        disabled
        className={clsx(buttonClasses, disabledClasses)}
      >
        <div className="absolute left-0 ml-4">
          <PlusIcon className="h-5" />
        </div>
        Add To Cart
      </button>
    );
  }

  return (
    <button
      aria-label="Add to cart"
      className={clsx(buttonClasses, {
        'hover:opacity-90': true
      })}
    >
      <div className="absolute left-0 ml-4">
        <PlusIcon className="h-5" />
      </div>
      Add To Cart
    </button>
  );
}

export function AddToCart({ product }: { product: Product }) {
  const { variants, availableForSale } = product;
  const { addCartItem } = useCart();
  const { state } = useProduct();
  const [message, formAction] = useActionState(addItem, null);

  const variant = variants.find((variant: ProductVariant) =>
    variant.selectedOptions.every(
      (option) => option.value === state[option.name.toLowerCase()]
    )
  );
  const defaultVariantId = variants.length === 1 ? variants[0]?.id : undefined;
  const selectedVariantId = variant?.id || defaultVariantId;
  const addItemAction = formAction.bind(null, selectedVariantId);
  const finalVariant = variants.find(
    (variant) => variant.id === selectedVariantId
  )!;

  return (
    <form
      action={async () => {
        addCartItem(finalVariant, product);
        addItemAction();
      }}
    >
      <SubmitButton
        availableForSale={availableForSale}
        selectedVariantId={selectedVariantId}
      />
      <p aria-live="polite" className="sr-only" role="status">
        {message}
      </p>
    </form>
  );
}


# ======================
# File: components/cart/CartIcon.tsx
# ======================

import { ShoppingBagOutlined } from "@mui/icons-material";
import { Badge, IconButton } from "@mui/material";
import { keyframes } from "@mui/system";

const glowAnimation = keyframes`
  0% { box-shadow: 0 0 4px rgba(255, 200, 100, 0.5); }
  50% { box-shadow: 0 0 12px rgba(255, 200, 100, 0.8); }
  100% { box-shadow: 0 0 4px rgba(255, 200, 100, 0.5); }
`;

export default function CartIcon({
  className,
  quantity = 0,
  toggleCart,
}: {
  className?: string;
  quantity?: number;
  toggleCart: () => void;
}) {
  return (
    <IconButton onClick={toggleCart} size="small" className={className} aria-label="Open cart">
      <Badge
        badgeContent={quantity > 0 ? quantity : null}
        color="primary"
        overlap="circular"
        sx={{
          "& .MuiBadge-badge": {
            fontSize: "10px",
            minWidth: "16px",
            height: "16px",
            backgroundColor: "rgba(255, 200, 100, 0.9)", // Soft golden yellow
            color: "#fff",
            borderRadius: "50%",
            boxShadow: "0 0 4px rgba(255, 200, 100, 0.5)",
            animation: `${glowAnimation} 3s infinite alternate ease-in-out`,
          },
        }}
      >
        <ShoppingBagOutlined fontSize="small" />
      </Badge>
    </IconButton>
  );
}


# ======================
# File: components/cart/modal.tsx
# ======================

// 'use client';

// import { Dialog, Transition } from '@headlessui/react';
// import { ShoppingCartIcon } from '@heroicons/react/24/outline';
// import Price from 'components/price';
// import { DEFAULT_OPTION } from 'lib/constants';
// import { createUrl } from 'lib/utils';
// import Image from 'next/image';
// import Link from 'next/link';
// import { Fragment, useEffect, useRef, useState } from 'react';
// import { createCartAndSetCookie, redirectToCheckout } from './actions';
// import { useCart } from './cart-context';
// import CartIcon from './CartIcon';
// import CheckoutButton from './components/CheckoutButton';
// import CloseCart from './components/CloseCart';
// import { DeleteItemButton } from './delete-item-button';

// type MerchandiseSearchParams = {
//   [key: string]: string;
// };

// export default function CartModal() {
//   const { cart, updateCartItem } = useCart();
//   const [isOpen, setIsOpen] = useState(false);
//   const quantityRef = useRef(cart?.totalQuantity);

//   const openCart = () => setIsOpen(true);
//   const closeCart = () => setIsOpen(false);

//   useEffect(() => {
//     if (!cart) {
//       createCartAndSetCookie();
//     }
//   }, [cart]);

//   useEffect(() => {
//     if (cart?.totalQuantity && cart?.totalQuantity !== quantityRef.current && cart?.totalQuantity > 0) {
//       if (!isOpen) {
//         setIsOpen(true);
//       }
//       quantityRef.current = cart?.totalQuantity;
//     }
//   }, [isOpen, cart?.totalQuantity, quantityRef]);

//   return (
//     <>
//       {/* ✅ FIX: Replace <button> with a <div> to avoid nesting issues */}
//       <div onClick={openCart} aria-label="Open cart" className="cursor-pointer">
//         <CartIcon quantity={cart?.totalQuantity} />
//       </div>

//       <Transition show={isOpen}>
//         <Dialog onClose={closeCart} className="relative z-50">
//           <Overlay />
//           <SlideInPanel closeCart={closeCart} cart={cart} updateCartItem={updateCartItem} />
//         </Dialog>
//       </Transition>
//     </>
//   );
// }

// /**
//  * ✅ Overlay (Dimmed Background)
//  */
// function Overlay() {
//   return (
//     <Transition.Child
//       as={Fragment}
//       enter="transition-all ease-in-out duration-300"
//       enterFrom="opacity-0 backdrop-blur-none"
//       enterTo="opacity-100 backdrop-blur-[.5px]"
//       leave="transition-all ease-in-out duration-200"
//       leaveFrom="opacity-100 backdrop-blur-[.5px]"
//       leaveTo="opacity-0 backdrop-blur-none"
//     >
//       <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
//     </Transition.Child>
//   );
// }

// /**
//  * ✅ Slide-In Cart Panel
//  */
// function SlideInPanel({ closeCart, cart, updateCartItem }: { closeCart: () => void; cart: any; updateCartItem: any }) {
//   return (
//     <Transition.Child
//       as={Fragment}
//       enter="transition-all ease-in-out duration-300"
//       enterFrom="translate-x-full"
//       enterTo="translate-x-0"
//       leave="transition-all ease-in-out duration-200"
//       leaveFrom="translate-x-0"
//       leaveTo="translate-x-full"
//     >
//       <Dialog.Panel className="fixed bottom-0 right-0 top-0 flex h-full w-full flex-col bg-white/80 p-6 text-black backdrop-blur-xl md:w-[390px] dark:bg-black/80 dark:text-white">
//         <CartHeader closeCart={closeCart} />
//         {cart?.lines?.length > 0 ? <CartContents cart={cart} updateCartItem={updateCartItem} /> : <EmptyCart />}
//       </Dialog.Panel>
//     </Transition.Child>
//   );
// }

// /**
//  * ✅ Cart Header with Close Button
//  */
// function CartHeader({ closeCart }: { closeCart: () => void }) {
//   return (
//     <div className="flex items-center justify-between">
//       <p className="text-lg font-semibold">My Cart</p>
//       <button aria-label="Close cart" onClick={closeCart}>
//         <CloseCart />
//       </button>
//     </div>
//   );
// }

// /**
//  * ✅ Empty Cart Message
//  */
// function EmptyCart() {
//   return (
//     <div className="mt-20 flex w-full flex-col items-center justify-center overflow-hidden">
//       <ShoppingCartIcon className="h-16" />
//       <p className="mt-6 text-center text-2xl font-bold">Your cart is empty.</p>
//     </div>
//   );
// }

// /**
//  * ✅ Full Cart Contents
//  */
// function CartContents({ cart, updateCartItem }: { cart: any; updateCartItem: any }) {
//   return (
//     <div className="flex h-full flex-col justify-between overflow-hidden p-1">
//       <ul className="grow overflow-auto py-4">
//         {cart.lines
//           .sort((a, b) => a.merchandise.product.title.localeCompare(b.merchandise.product.title))
//           .map((item, i) => (
//             <CartItem key={i} item={item} updateCartItem={updateCartItem} />
//           ))}
//       </ul>
//       <CartSummary cart={cart} />
//       <form action={redirectToCheckout}>
//         <CheckoutButton />
//       </form>
//     </div>
//   );
// }

// /**
//  * ✅ Individual Cart Item
//  */
// function CartItem({ item, updateCartItem }: { item: any; updateCartItem: any }) {
//   const merchandiseSearchParams = {} as MerchandiseSearchParams;
//   item.merchandise.selectedOptions.forEach(({ name, value }: { name: string; value: string }) => {
//     if (value !== DEFAULT_OPTION) {
//       merchandiseSearchParams[name.toLowerCase()] = value;
//     }
//   });

//   const merchandiseUrl = createUrl(`/product/${item.merchandise.product.handle}`, new URLSearchParams(merchandiseSearchParams));

//   return (
//     <li className="flex w-full flex-col border-b border-neutral-300 dark:border-neutral-700">
//       <div className="relative flex w-full flex-row justify-between px-1 py-4">
//         <div className="absolute z-40 -ml-1 -mt-2">
//           <DeleteItemButton item={item} optimisticUpdate={updateCartItem} />
//         </div>
//         <div className="flex flex-row">
//           <div className="relative h-16 w-16 overflow-hidden rounded-md border border-neutral-300 bg-neutral-300 dark:border-neutral-700 dark:bg-neutral-900 dark:hover:bg-neutral-800">
//             <Image className="h-full w-full object-cover" width={64} height={64} alt={item.merchandise.product.title} src={item.merchandise.product.featuredImage.url} />
//           </div>
//           <Link href={merchandiseUrl} className="z-30 ml-2 flex flex-row space-x-4">
//             <div className="flex flex-1 flex-col text-base">
//               <span className="leading-tight">{item.merchandise.product.title}</span>
//               {item.merchandise.title !== DEFAULT_OPTION && <p className="text-sm text-neutral-500 dark:text-neutral-400">{item.merchandise.title}</p>}
//             </div>
//           </Link>
//         </div>
//         <Price className="text-right text-sm" amount={item.cost.totalAmount.amount} currencyCode={item.cost.totalAmount.currencyCode} />
//       </div>
//     </li>
//   );
// }

// /**
//  * ✅ Cart Summary (Total, Taxes, Shipping)
//  */
// function CartSummary({ cart }: { cart: any }) {
//   return (
//     <div className="py-4 text-sm text-neutral-500 dark:text-neutral-400">
//       <p>Total</p>
//       <Price className="text-right text-base text-black dark:text-white" amount={cart.cost.totalAmount.amount} currencyCode={cart.cost.totalAmount.currencyCode} />
//     </div>
//   );
// }


# ======================
# File: components/cart/components/CartModal.tsx
# ======================

'use client';

import CartMenu from 'components/layout/navbar/components/CartMenu';
import { useEffect, useRef } from 'react';
import { createCartAndSetCookie } from '../actions';
import { useCart } from '../cart-context';
import CartIcon from '../CartIcon';


export default function CartModal({ atTop, cartOpen, toggleCart }: {
  atTop: boolean;
  cartOpen: boolean;
  toggleCart: () => void;
}) {
  const { cart } = useCart();
  const quantityRef = useRef(cart?.totalQuantity);


  useEffect(() => {
    if (!cart) {
      createCartAndSetCookie();
    }
  }, [cart]);

  useEffect(() => {
    if (cart?.totalQuantity && cart?.totalQuantity !== quantityRef.current && cart?.totalQuantity > 0) {
      if (!cartOpen) {
        toggleCart();
      }
      quantityRef.current = cart?.totalQuantity;
    }
  }, [cartOpen, cart?.totalQuantity, quantityRef]);

  return (
    <>
      <CartIcon quantity={cart?.totalQuantity} toggleCart={toggleCart} />
      <CartMenu
        cart={cart}
        atTop={atTop}
        cartOpen={cartOpen}
        toggleCart={toggleCart}
      />
    </>
  );
}


# ======================
# File: components/cart/components/CartHeader.tsx
# ======================

'use client';

import CloseIcon from '@mui/icons-material/Close';
import { Box, IconButton, Typography, useTheme } from '@mui/material';
import useIsMobile from 'components/hooks/useIsMobile';
import { useCart } from '../cart-context';

export default function CartHeader() {
  const theme = useTheme();
  const isMobile = useIsMobile();
  const { cart } = useCart();

  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="space-between"
      px={2}
      height={65}
      borderBottom={`1px solid ${theme.palette.divider}`}
    >
      <Typography variant="h6" fontWeight={500}>
        Cart ({cart?.totalQuantity || 0})
      </Typography>
      {!isMobile && (
        <IconButton onClick={() => { }} aria-label="Close cart">
          <CloseIcon />
        </IconButton>
      )}
    </Box>
  );
}


# ======================
# File: components/cart/components/CartItem.tsx
# ======================

"use client";

import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import { IconButton } from "@mui/material";
import Price from "components/price";
import { DEFAULT_OPTION } from "lib/constants";
import { createUrl } from "lib/utils";
import Image from "next/image";
import Link from "next/link";
import { useCart } from "../cart-context";

/**
 * A single cart line item that shows:
 * - Product image and title
 * - Price
 * - Buttons to increment/decrement quantity
 */
export default function CartItem({ item }: { item: any }) {
  const { updateCartItem } = useCart();

  /**
   * handleUpdateQuantity calls our 'updateCartItem' with 'plus' or 'minus'.
   * If quantity goes to zero, the item is removed automatically by the cartReducer.
   */
  const handleUpdateQuantity = (change: number) => {
    if (change > 0) {
      updateCartItem(item.merchandise.id, "plus");
    } else {
      updateCartItem(item.merchandise.id, "minus");
    }
  };

  // Build URL to product using selectedOptions
  const merchandiseSearchParams: Record<string, string> = {};
  item.merchandise.selectedOptions.forEach(
    ({ name, value }: { name: string; value: string }) => {
      if (value !== DEFAULT_OPTION) {
        merchandiseSearchParams[name.toLowerCase()] = value;
      }
    }
  );

  const merchandiseUrl = createUrl(
    `/product/${item.merchandise.product.handle}`,
    new URLSearchParams(merchandiseSearchParams)
  );

  return (
    <li className="flex w-full flex-col border-b border-neutral-300 dark:border-neutral-700">
      <div className="relative flex w-full flex-row justify-between px-1 py-4">
        {/* Left side: product image + link */}
        <div className="flex flex-row">
          <div className="relative h-16 w-16 overflow-hidden rounded-md border border-neutral-300 bg-neutral-300 dark:border-neutral-700 dark:bg-neutral-900 dark:hover:bg-neutral-800">
            <Image
              className="h-full w-full object-cover"
              width={64}
              height={64}
              alt={item.merchandise.product.title}
              src={item.merchandise.product.featuredImage.url}
            />
          </div>
          <Link href={merchandiseUrl} className="z-30 ml-2 flex flex-row space-x-4">
            <div className="flex flex-1 flex-col text-base">
              <span className="leading-tight">{item.merchandise.product.title}</span>
              {item.merchandise.title !== DEFAULT_OPTION && (
                <p className="text-sm text-neutral-500 dark:text-neutral-400">
                  {item.merchandise.title}
                </p>
              )}
            </div>
          </Link>
        </div>

        {/* Right side: price and quantity controls */}
        <div className="flex flex-col items-center">
          <Price
            className="text-right text-sm"
            amount={item.cost.totalAmount.amount}
            currencyCode={item.cost.totalAmount.currencyCode}
          />
          <div className="flex items-center space-x-2 mt-2">
            <IconButton size="small" onClick={() => handleUpdateQuantity(-1)}>
              <RemoveIcon />
            </IconButton>
            <span className="text-sm font-medium">{item.quantity}</span>
            <IconButton size="small" onClick={() => handleUpdateQuantity(1)}>
              <AddIcon />
            </IconButton>
          </div>
        </div>
      </div>
    </li>
  );
}


# ======================
# File: components/cart/components/CartSummary.tsx
# ======================

import Price from 'components/price';

export default function CartSummary({ cart }: { cart: any }) {
  return (
    <div className="py-4 text-sm text-neutral-500 dark:text-neutral-400">
      <p>Total</p>
      <Price className="text-right text-base text-black dark:text-white" amount={cart.cost.totalAmount.amount} currencyCode={cart.cost.totalAmount.currencyCode} />
    </div>
  );
}


# ======================
# File: components/cart/components/CartContents.tsx
# ======================

"use client";
import { redirectToCheckout } from '../actions';
import { useCart } from '../cart-context';
import CartItem from './CartItem';
import CartSummary from './CartSummary';
import CheckoutButton from './CheckoutButton';

export default function CartContents() {
  const { cart } = useCart();
  return (
    <div className="flex h-full flex-col justify-between overflow-hidden p-1">
      <ul className="grow overflow-auto py-4">
        {cart.lines
          .sort((a, b) => a.merchandise.product.title.localeCompare(b.merchandise.product.title))
          .map((item, i) => (
            <CartItem key={i} item={item} />
          ))}
      </ul>
      <CartSummary cart={cart} />
      <form action={redirectToCheckout}>
        <CheckoutButton />
      </form>
    </div>
  );
}


# ======================
# File: components/cart/components/EmptyCart.tsx
# ======================

import { ShoppingCartIcon } from '@heroicons/react/24/outline';

export default function EmptyCart() {
  return (
    <div className="mt-20 flex w-full flex-col items-center justify-center overflow-hidden">
      <ShoppingCartIcon className="h-16" />
      <p className="mt-6 text-center text-2xl font-bold">Your cart is empty.</p>
    </div>
  );
}


# ======================
# File: components/cart/components/CheckoutButton.tsx
# ======================

import LoadingDots from "components/loading-dots";
import { useFormStatus } from "react-dom";

export default function CheckoutButton() {
    const { pending } = useFormStatus();

    return (
        <button
            className="block w-full rounded-full bg-blue-600 p-3 text-center text-sm font-medium text-white opacity-90 hover:opacity-100"
            type="submit"
            disabled={pending}
        >
            {pending ? <LoadingDots className="bg-white" /> : 'Proceed to Checkout'}
        </button>
    );
}

# ======================
# File: components/grid/index.tsx
# ======================

import clsx from 'clsx';

function Grid(props: React.ComponentProps<'ul'>) {
  return (
    <ul {...props} className={clsx('grid grid-flow-row gap-4', props.className)}>
      {props.children}
    </ul>
  );
}

function GridItem(props: React.ComponentProps<'li'>) {
  return (
    <li {...props} className={clsx('aspect-square transition-opacity', props.className)}>
      {props.children}
    </li>
  );
}

Grid.Item = GridItem;

export default Grid;


# ======================
# File: components/grid/three-items.tsx
# ======================

import { GridTileImage } from 'components/grid/tile';
import { getCollectionProducts } from 'lib/shopify';
import type { Product } from 'lib/shopify/types';
import Link from 'next/link';

function ThreeItemGridItem({
  item,
  size,
  priority
}: {
  item: Product;
  size: 'full' | 'half';
  priority?: boolean;
}) {
  return (
    <div
      className={size === 'full' ? 'md:col-span-4 md:row-span-2' : 'md:col-span-2 md:row-span-1'}
    >
      <Link
        className="relative block aspect-square h-full w-full"
        href={`/product/${item.handle}`}
        prefetch={true}
      >
        <GridTileImage
          src={item.featuredImage.url}
          fill
          sizes={
            size === 'full' ? '(min-width: 768px) 66vw, 100vw' : '(min-width: 768px) 33vw, 100vw'
          }
          priority={priority}
          alt={item.title}
          label={{
            position: size === 'full' ? 'center' : 'bottom',
            title: item.title as string,
            amount: item.priceRange.maxVariantPrice.amount,
            currencyCode: item.priceRange.maxVariantPrice.currencyCode
          }}
        />
      </Link>
    </div>
  );
}

export async function ThreeItemGrid() {
  // Collections that start with `hidden-*` are hidden from the search page.
  const homepageItems = await getCollectionProducts({
    collection: 'Diffuser'
  });

  if (!homepageItems[0] || !homepageItems[1] || !homepageItems[2]) return null;

  const [firstProduct, secondProduct, thirdProduct] = homepageItems;

  return (
    <section className="mx-auto grid max-w-(--breakpoint-2xl) gap-4 px-4 pb-4 md:grid-cols-6 md:grid-rows-2 lg:max-h-[calc(100vh-200px)]">
      <ThreeItemGridItem size="full" item={firstProduct} priority={true} />
      <ThreeItemGridItem size="half" item={secondProduct} priority={true} />
      <ThreeItemGridItem size="half" item={thirdProduct} />
    </section>
  );
}


# ======================
# File: components/grid/tile.tsx
# ======================

import clsx from 'clsx';
import Image from 'next/image';
import Label from '../label';

export function GridTileImage({
  isInteractive = true,
  active,
  label,
  ...props
}: {
  isInteractive?: boolean;
  active?: boolean;
  label?: {
    title: string;
    amount: string;
    currencyCode: string;
    position?: 'bottom' | 'center';
  };
} & React.ComponentProps<typeof Image>) {
  return (
    <div
      className={clsx(
        'group flex h-full w-full items-center justify-center overflow-hidden rounded-lg border bg-white hover:border-blue-600 dark:bg-black',
        {
          relative: label,
          'border-2 border-blue-600': active,
          'border-neutral-200 dark:border-neutral-800': !active
        }
      )}
    >
      {props.src ? (
        <Image
          className={clsx('relative h-full w-full object-contain', {
            'transition duration-300 ease-in-out group-hover:scale-105': isInteractive
          })}
          {...props}
        />
      ) : null}
      {label ? (
        <Label
          title={label.title}
          amount={label.amount}
          currencyCode={label.currencyCode}
          position={label.position}
        />
      ) : null}
    </div>
  );
}


# ======================
# File: public/data/README.md
# ======================

# JSON Structure Guide

## Overview
This document explains how the JSON structure is organized for managing the navigation menu, footer menu, and other structured content in the project. The JSON files are stored in the `public/data` directory.

## Directory Structure
```plaintext
public/data/
  ├── footer/
  │   └── data.json
  ├── landingPage/
  │   └── data.json
  ├── faq/
  │   └── data.json
```

---

## `menu/data.json`
This file defines the navigation structure for both the **primary menu**, **secondary menu**, and the **footer menu**.

### **Structure**
```json
{
  "pages": {
    "home": { "title": "Home", "path": "/", "isMobile": false },
    "newArrivals": { "title": "New Arrivals", "path": "/new-arrivals", "isMobile": false },
    "lighting": { "title": "Lighting", "path": "/lighting", "isMobile": true },
    "diffusers": { "title": "Diffusers", "path": "/diffusers", "isMobile": true },
    "about": { "title": "About Us", "path": "/about", "isMobile": true },
    "contact": { "title": "Contact Us", "path": "/contact", "isMobile": true },
    "trackOrder": { "title": "Track Order", "path": "/track-your-order", "isMobile": true },
    "ourVision": { "title": "Our Vision", "path": "/our-vision", "displayOnMobileMenu": true },
    "faq": { "title": "FAQ", "path": "/faq", "displayOnMobileMenu": false },
    "contactInfo": { "title": "Contact Us", "path": "/contact-information", "displayOnMobileMenu": true },
    "privacyPolicy": { "title": "Privacy Policy", "path": "/policies/privacy-policy", "displayOnMobileMenu": true },
    "termsOfService": { "title": "Terms of Service", "path": "/policies/terms-of-service", "displayOnMobileMenu": true },
    "refundPolicy": { "title": "Refund Policy", "path": "/policies/refund-policy", "displayOnMobileMenu": true }
  },
  "primaryMenu": ["home", "newArrivals", "lighting", "diffusers"],
  "secondaryMenu": ["about", "contact", "trackOrder"],
  "footerMenu": [
    {
      "title": "About Us",
      "menu": ["ourVision"]
    },
    {
      "title": "Policies",
      "menu": ["privacyPolicy", "termsOfService", "refundPolicy"]
    },
    {
      "title": "Help Center",
      "menu": ["faq", "contactInfo", "trackOrder"]
    }
  ]
}
```

### **Explanation**
- **`pages`**: A dictionary mapping page identifiers to their corresponding title, path, and mobile visibility.
- **`primaryMenu`**: An array of page identifiers that belong to the primary navigation menu.
- **`secondaryMenu`**: An array of page identifiers for the secondary navigation menu.
- **`footerMenu`**: An array of section objects containing a title and a list of pages belonging to that section.

---

## **Fetching the JSON Data in React**
To load and use this JSON data dynamically in React components, use `useEffect` and `useState`:
```tsx
import { useEffect, useState } from "react";

export default function useNavData() {
  const [navData, setNavData] = useState(null);

  useEffect(() => {
    fetch("/data/menu/data.json")
      .then((res) => res.json())
      .then((data) => {
        setNavData(data);
      })
      .catch((error) => console.error("Error fetching navigation data:", error));
  }, []);

  return navData;
}
```
This hook can be used inside components to access navigation data dynamically.

---

## **Updating the JSON**
Whenever a new page is added:
1. Add an entry inside `pages`.
2. If it belongs to a navigation section, add its identifier to `primaryMenu`, `secondaryMenu`, or `footerMenu`.
3. Ensure `displayOnMobileMenu` is set correctly if it should appear in the mobile menu.

By following this structure, navigation remains dynamic and easily maintainable. 🚀


# ======================
# File: public/data/faq/data.json
# ======================

[
    {
      "question": "What is your return policy??",
      "answer": "We offer a 30-day return policy for unused and unopened items."
    },
    {
      "question": "Do you ship internationally?",
      "answer": "Yes, we ship to most countries worldwide."
    },
    {
      "question": "How can I track my order?",
      "answer": "Once your order ships, we will send you a tracking number via email."
    }
  ]
  

# ======================
# File: public/data/menu/data.json
# ======================

{
    "pages": {
      "home": { "title": "Home", "path": "/" },
      "newArrivals": { "title": "New Arrivals", "path": "/search/new-arrivals" },
      "lighting": { "title": "Lighting", "path": "/search/lighting" },
      "diffusers": { "title": "Diffusers", "path": "/search/diffuser" },
      "about": { "title": "About Us", "path": "/about" },
      "contact": { "title": "Contact Us", "path": "/contact" },
      "trackOrder": { "title": "Track Order", "path": "/track-your-order" },
      "ourVision": { "title": "Our Vision", "path": "/our-vision" },
      "faq": { "title": "FAQ", "path": "/faq" },
      "contactInfo": { "title": "Contact Us", "path": "/contact-information" },
      "privacyPolicy": { "title": "Privacy Policy", "path": "/policies/privacy-policy" },
      "termsOfService": { "title": "Terms of Service", "path": "/policies/terms-of-service" },
      "refundPolicy": { "title": "Refund Policy", "path": "/policies/refund-policy" }
    },
    "deskTopMenu": ["home", "newArrivals"],
    "primaryMenu": ["home", "newArrivals", "lighting", "diffusers"],
    "secondaryMenu": ["about", "contact", "trackOrder"],
    "footerMenu": [
      {
        "title": "About Us",
        "menu": ["ourVision"]
      },
      {
        "title": "Policies",
        "menu": ["privacyPolicy", "termsOfService", "refundPolicy"]
      },
      {
        "title": "Help Center",
        "menu": ["faq", "contactInfo", "trackOrder"]
      }
    ]
  }
  

# ======================
# File: public/data/socials/data.json
# ======================

[
  {
    "name": "TikTok",
    "icon": "FaTiktok",
    "url": "https://tiktok.com"
  },
  {
    "name": "Instagram",
    "icon": "FaInstagram",
    "url": "https://www.instagram.com"
  },
  {
    "name": "Facebook",
    "icon": "FaFacebookF",
    "url": "https://www.facebook.com"
  }
]


# ======================
# File: public/data/landingPage/data.json
# ======================

{
    "title": "Elevate Your Nighttime Ambiance",
    "description": "Discover premium lighting and diffusers that transform your space into a sanctuary",
    "buttonText": "Shop Now",
    "buttonLink": "/search"
  }
  

# ======================
# File: theme/useThemeMode.ts
# ======================

import { useMediaQuery } from "@mui/material";
import { useTheme } from "@mui/material/styles";

/**
 * Custom hook to get the current theme mode ("light" or "dark").
 */
export function useThemeMode(): "light" | "dark" {
  const theme = useTheme();
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");

  // If the theme mode is explicitly set, return it.
  // Otherwise, fall back to system preference.
  return theme.palette.mode ?? (prefersDarkMode ? "dark" : "light");
}


# ======================
# File: theme/ThemeProvider.tsx
# ======================

"use client"; // ✅ Ensure this is a client component

import { CssBaseline, ThemeProvider } from "@mui/material";
import { ReactNode, createContext, useContext, useEffect, useMemo, useState } from "react";
import { createCustomTheme } from "./theme";

// Theme Context
const ColorModeContext = createContext({
  toggleColorMode: () => {},
  mode: "light" as "light" | "dark",
});

export function useColorMode() {
  return useContext(ColorModeContext);
}

export default function ThemeContextProvider({ children }: { children: ReactNode }) {
  const [mode, setMode] = useState<"light" | "dark">(() => {
    // ✅ Fix: Use a safe default to prevent mismatch
    if (typeof window !== "undefined") {
      return (localStorage.getItem("theme") as "light" | "dark") || "light";
    }
    return "dark"; 
  });

  const [hydrated, setHydrated] = useState(false);

  useEffect(() => {
    setHydrated(true);
    const storedTheme = localStorage.getItem("theme") as "light" | "dark";
    if (storedTheme) setMode(storedTheme);
  }, []);

  const colorMode = useMemo(
    () => ({
      toggleColorMode: () => {
        setMode((prevMode) => {
          const newMode = prevMode === "light" ? "dark" : "light";
          localStorage.setItem("theme", newMode);
          return newMode;
        });
      },
      mode,
    }),
    []
  );

  const theme = useMemo(() => createCustomTheme(mode), [mode]);

  if (!hydrated) {
    return <div style={{ visibility: "hidden" }}>{children}</div>;
  }

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ColorModeContext.Provider>
  );
}


# ======================
# File: theme/theme.ts
# ======================

import { createTheme, ThemeOptions } from "@mui/material";

declare module "@mui/material/styles" {
  interface Palette {
    navbar: Palette["primary"]; // ✅ Extend MUI palette for navbar
  }
  interface PaletteOptions {
    navbar?: PaletteOptions["primary"];
  }
}

// Define the Dark Theme
export const darkTheme: ThemeOptions = {
  palette: {
    mode: "dark",
    primary: {
      main: "#ffffff",
    },
    background: {
      default: "#121212",
      paper: "#1E1E1E",
    },
    navbar: {
      main: "#0A0A0A",
    },
    text: {
      primary: "#ffffff",
    },
  },
};

// Define the Light Theme
export const lightTheme: ThemeOptions = {
  palette: {
    mode: "dark",
    primary: {
      main: "#121212", // Deep black for contrast
    },
    background: {
      default: "#F6F6F6", // ✅ Softer, warm off-white background
      paper: "#ECECEC", // ✅ Slightly darker off-white for cards/paper
    },
    navbar: {
      main: "#DADADA", // ✅ Softer gray, not too white but still light mode-friendly
    },
    text: {
      primary: "#1A1A1A", // ✅ Dark gray for readability
      secondary: "#4A4A4A", // ✅ Subtle gray for secondary text
    },
    divider: "#D0D0D0", // ✅ Light gray dividers for subtle separation
  },
};

// Function to Create Theme Dynamically
export const createCustomTheme = (mode: "light" | "dark") =>
  createTheme(mode === "dark" ? darkTheme : lightTheme);


# ======================
# File: lib/type-guards.ts
# ======================

export interface ShopifyErrorLike {
  status: number;
  message: Error;
  cause?: Error;
}

export const isObject = (object: unknown): object is Record<string, unknown> => {
  return typeof object === 'object' && object !== null && !Array.isArray(object);
};

export const isShopifyError = (error: unknown): error is ShopifyErrorLike => {
  if (!isObject(error)) return false;

  if (error instanceof Error) return true;

  return findError(error);
};

function findError<T extends object>(error: T): boolean {
  if (Object.prototype.toString.call(error) === '[object Error]') {
    return true;
  }

  const prototype = Object.getPrototypeOf(error) as T | null;

  return prototype === null ? false : findError(prototype);
}


# ======================
# File: lib/utils.ts
# ======================

import { ReadonlyURLSearchParams } from 'next/navigation';

export const baseUrl = process.env.VERCEL_PROJECT_PRODUCTION_URL
  ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
  : 'http://localhost:3000';

export const createUrl = (
  pathname: string,
  params: URLSearchParams | ReadonlyURLSearchParams
) => {
  const paramsString = params.toString();
  const queryString = `${paramsString.length ? '?' : ''}${paramsString}`;

  return `${pathname}${queryString}`;
};

export const ensureStartsWith = (stringToCheck: string, startsWith: string) =>
  stringToCheck.startsWith(startsWith)
    ? stringToCheck
    : `${startsWith}${stringToCheck}`;

export const validateEnvironmentVariables = () => {
  const requiredEnvironmentVariables = [
    'SHOPIFY_STORE_DOMAIN',
    'SHOPIFY_STOREFRONT_ACCESS_TOKEN'
  ];
  const missingEnvironmentVariables = [] as string[];

  requiredEnvironmentVariables.forEach((envVar) => {
    if (!process.env[envVar]) {
      missingEnvironmentVariables.push(envVar);
    }
  });

  if (missingEnvironmentVariables.length) {
    throw new Error(
      `The following environment variables are missing. Your site will not work without them. Read more: https://vercel.com/docs/integrations/shopify#configure-environment-variables\n\n${missingEnvironmentVariables.join(
        '\n'
      )}\n`
    );
  }

  if (
    process.env.SHOPIFY_STORE_DOMAIN?.includes('[') ||
    process.env.SHOPIFY_STORE_DOMAIN?.includes(']')
  ) {
    throw new Error(
      'Your `SHOPIFY_STORE_DOMAIN` environment variable includes brackets (ie. `[` and / or `]`). Your site will not work with them there. Please remove them.'
    );
  }
};


# ======================
# File: lib/constants.ts
# ======================

export type SortFilterItem = {
  title: string;
  slug: string | null;
  sortKey: 'RELEVANCE' | 'BEST_SELLING' | 'CREATED_AT' | 'PRICE';
  reverse: boolean;
};

export const defaultSort: SortFilterItem = {
  title: 'Relevance',
  slug: null,
  sortKey: 'RELEVANCE',
  reverse: false
};

export const sorting: SortFilterItem[] = [
  defaultSort,
  { title: 'Trending', slug: 'trending-desc', sortKey: 'BEST_SELLING', reverse: false }, // asc
  { title: 'Latest arrivals', slug: 'latest-desc', sortKey: 'CREATED_AT', reverse: true },
  { title: 'Price: Low to high', slug: 'price-asc', sortKey: 'PRICE', reverse: false }, // asc
  { title: 'Price: High to low', slug: 'price-desc', sortKey: 'PRICE', reverse: true }
];

export const TAGS = {
  collections: 'collections',
  products: 'products',
  cart: 'cart'
};

export const HIDDEN_PRODUCT_TAG = 'nextjs-frontend-hidden';
export const DEFAULT_OPTION = 'Default Title';
export const SHOPIFY_GRAPHQL_API_ENDPOINT = '/api/2023-01/graphql.json';


# ======================
# File: lib/shopify/types.ts
# ======================

export type Maybe<T> = T | null;

export type Connection<T> = {
  edges: Array<Edge<T>>;
};

export type Edge<T> = {
  node: T;
};

export type Cart = Omit<ShopifyCart, 'lines'> & {
  lines: CartItem[];
};

export type CartProduct = {
  id: string;
  handle: string;
  title: string;
  featuredImage: Image;
};

export type CartItem = {
  id: string | undefined;
  quantity: number;
  cost: {
    totalAmount: Money;
  };
  merchandise: {
    id: string;
    title: string;
    selectedOptions: {
      name: string;
      value: string;
    }[];
    product: CartProduct;
  };
};

export type Collection = ShopifyCollection & {
  path: string;
};

export type Image = {
  url: string;
  altText: string;
  width: number;
  height: number;
};

export type Menu = {
  title: string;
  path: string;
};

export type Money = {
  amount: string;
  currencyCode: string;
};

export type Page = {
  id: string;
  title: string;
  handle: string;
  body: string;
  bodySummary: string;
  seo?: SEO;
  createdAt: string;
  updatedAt: string;
};

export type Product = Omit<ShopifyProduct, 'variants' | 'images'> & {
  variants: ProductVariant[];
  images: Image[];
};

export type ProductOption = {
  id: string;
  name: string;
  values: string[];
};

export type ProductVariant = {
  id: string;
  title: string;
  availableForSale: boolean;
  selectedOptions: {
    name: string;
    value: string;
  }[];
  price: Money;
};

export type SEO = {
  title: string;
  description: string;
};

export type ShopifyCart = {
  id: string | undefined;
  checkoutUrl: string;
  cost: {
    subtotalAmount: Money;
    totalAmount: Money;
    totalTaxAmount: Money;
  };
  lines: Connection<CartItem>;
  totalQuantity: number;
};

export type ShopifyCollection = {
  handle: string;
  title: string;
  description: string;
  seo: SEO;
  updatedAt: string;
};

export type ShopifyProduct = {
  id: string;
  handle: string;
  availableForSale: boolean;
  title: string;
  description: string;
  descriptionHtml: string;
  options: ProductOption[];
  priceRange: {
    maxVariantPrice: Money;
    minVariantPrice: Money;
  };
  variants: Connection<ProductVariant>;
  featuredImage: Image;
  images: Connection<Image>;
  seo: SEO;
  tags: string[];
  updatedAt: string;
};

export type ShopifyCartOperation = {
  data: {
    cart: ShopifyCart;
  };
  variables: {
    cartId: string;
  };
};

export type ShopifyCreateCartOperation = {
  data: { cartCreate: { cart: ShopifyCart } };
};

export type ShopifyAddToCartOperation = {
  data: {
    cartLinesAdd: {
      cart: ShopifyCart;
    };
  };
  variables: {
    cartId: string;
    lines: {
      merchandiseId: string;
      quantity: number;
    }[];
  };
};

export type ShopifyRemoveFromCartOperation = {
  data: {
    cartLinesRemove: {
      cart: ShopifyCart;
    };
  };
  variables: {
    cartId: string;
    lineIds: string[];
  };
};

export type ShopifyUpdateCartOperation = {
  data: {
    cartLinesUpdate: {
      cart: ShopifyCart;
    };
  };
  variables: {
    cartId: string;
    lines: {
      id: string;
      merchandiseId: string;
      quantity: number;
    }[];
  };
};

export type ShopifyCollectionOperation = {
  data: {
    collection: ShopifyCollection;
  };
  variables: {
    handle: string;
  };
};

export type ShopifyCollectionProductsOperation = {
  data: {
    collection: {
      products: Connection<ShopifyProduct>;
    };
  };
  variables: {
    handle: string;
    reverse?: boolean;
    sortKey?: string;
  };
};

export type ShopifyCollectionsOperation = {
  data: {
    collections: Connection<ShopifyCollection>;
  };
};

export type ShopifyMenuOperation = {
  data: {
    menu?: {
      items: {
        title: string;
        url: string;
      }[];
    };
  };
  variables: {
    handle: string;
  };
};

export type ShopifyPageOperation = {
  data: { pageByHandle: Page };
  variables: { handle: string };
};

export type ShopifyPagesOperation = {
  data: {
    pages: Connection<Page>;
  };
};

export type ShopifyProductOperation = {
  data: { product: ShopifyProduct };
  variables: {
    handle: string;
  };
};

export type ShopifyProductRecommendationsOperation = {
  data: {
    productRecommendations: ShopifyProduct[];
  };
  variables: {
    productId: string;
  };
};

export type ShopifyProductsOperation = {
  data: {
    products: Connection<ShopifyProduct>;
  };
  variables: {
    query?: string;
    reverse?: boolean;
    sortKey?: string;
  };
};


# ======================
# File: lib/shopify/index.ts
# ======================

import {
  HIDDEN_PRODUCT_TAG,
  SHOPIFY_GRAPHQL_API_ENDPOINT,
  TAGS
} from 'lib/constants';
import { isShopifyError } from 'lib/type-guards';
import { ensureStartsWith } from 'lib/utils';
import {
  unstable_cacheLife as cacheLife,
  unstable_cacheTag as cacheTag,
  revalidateTag
} from 'next/cache';
import { cookies, headers } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';
import {
  addToCartMutation,
  createCartMutation,
  editCartItemsMutation,
  removeFromCartMutation
} from './mutations/cart';
import { getCartQuery } from './queries/cart';
import {
  getCollectionProductsQuery,
  getCollectionQuery,
  getCollectionsQuery
} from './queries/collection';
import { getMenuQuery } from './queries/menu';
import { getPageQuery, getPagesQuery } from './queries/page';
import { GET_ALL_POLICIES_QUERY, getPolicyQuery } from './queries/policies';
import {
  getProductQuery,
  getProductRecommendationsQuery,
  getProductsQuery
} from './queries/product';
import {
  Cart,
  Collection,
  Connection,
  Image,
  Menu,
  Page,
  Product,
  ShopifyAddToCartOperation,
  ShopifyCart,
  ShopifyCartOperation,
  ShopifyCollection,
  ShopifyCollectionOperation,
  ShopifyCollectionProductsOperation,
  ShopifyCollectionsOperation,
  ShopifyCreateCartOperation,
  ShopifyMenuOperation,
  ShopifyPageOperation,
  ShopifyPagesOperation,
  ShopifyProduct,
  ShopifyProductOperation,
  ShopifyProductRecommendationsOperation,
  ShopifyProductsOperation,
  ShopifyRemoveFromCartOperation,
  ShopifyUpdateCartOperation
} from './types';

const domain = process.env.SHOPIFY_STORE_DOMAIN
  ? ensureStartsWith(process.env.SHOPIFY_STORE_DOMAIN, 'https://')
  : '';
const endpoint = `${domain}${SHOPIFY_GRAPHQL_API_ENDPOINT}`;
const key = process.env.SHOPIFY_STOREFRONT_ACCESS_TOKEN!;

type ExtractVariables<T> = T extends { variables: object }
  ? T['variables']
  : never;

export async function shopifyFetch<T>({
  headers,
  query,
  variables
}: {
  headers?: HeadersInit;
  query: string;
  variables?: ExtractVariables<T>;
}): Promise<{ status: number; body: T } | never> {
  try {
    const result = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': key,
        ...headers
      },
      body: JSON.stringify({
        ...(query && { query }),
        ...(variables && { variables })
      })
    });

    const body = await result.json();

    if (body.errors) {
      throw body.errors[0];
    }

    return {
      status: result.status,
      body
    };
  } catch (e) {
    if (isShopifyError(e)) {
      throw {
        cause: e.cause?.toString() || 'unknown',
        status: e.status || 500,
        message: e.message,
        query
      };
    }

    throw {
      error: e,
      query
    };
  }
}

const removeEdgesAndNodes = <T>(array: Connection<T>): T[] => {
  return array.edges.map((edge) => edge?.node);
};

const reshapeCart = (cart: ShopifyCart): Cart => {
  if (!cart.cost?.totalTaxAmount) {
    cart.cost.totalTaxAmount = {
      amount: '0.0',
      currencyCode: cart.cost.totalAmount.currencyCode
    };
  }

  return {
    ...cart,
    lines: removeEdgesAndNodes(cart.lines)
  };
};

const reshapeCollection = (
  collection: ShopifyCollection
): Collection | undefined => {
  if (!collection) {
    return undefined;
  }

  return {
    ...collection,
    path: `/search/${collection.handle}`
  };
};

const reshapeCollections = (collections: ShopifyCollection[]) => {
  const reshapedCollections = [];

  for (const collection of collections) {
    if (collection) {
      const reshapedCollection = reshapeCollection(collection);

      if (reshapedCollection) {
        reshapedCollections.push(reshapedCollection);
      }
    }
  }

  return reshapedCollections;
};

const reshapeImages = (images: Connection<Image>, productTitle: string) => {
  const flattened = removeEdgesAndNodes(images);

  return flattened.map((image) => {
    const filename = image.url.match(/.*\/(.*)\..*/)?.[1];
    return {
      ...image,
      altText: image.altText || `${productTitle} - ${filename}`
    };
  });
};

const reshapeProduct = (
  product: ShopifyProduct,
  filterHiddenProducts: boolean = true
) => {
  if (
    !product ||
    (filterHiddenProducts && product.tags.includes(HIDDEN_PRODUCT_TAG))
  ) {
    return undefined;
  }

  const { images, variants, ...rest } = product;

  return {
    ...rest,
    images: reshapeImages(images, product.title),
    variants: removeEdgesAndNodes(variants)
  };
};

const reshapeProducts = (products: ShopifyProduct[]) => {
  const reshapedProducts = [];

  for (const product of products) {
    if (product) {
      const reshapedProduct = reshapeProduct(product);

      if (reshapedProduct) {
        reshapedProducts.push(reshapedProduct);
      }
    }
  }

  return reshapedProducts;
};

export async function createCart(): Promise<Cart> {
  const res = await shopifyFetch<ShopifyCreateCartOperation>({
    query: createCartMutation
  });

  return reshapeCart(res.body.data.cartCreate.cart);
}

export async function addToCart(
  lines: { merchandiseId: string; quantity: number }[]
): Promise<Cart> {
  const cartId = (await cookies()).get('cartId')?.value!;
  const res = await shopifyFetch<ShopifyAddToCartOperation>({
    query: addToCartMutation,
    variables: {
      cartId,
      lines
    }
  });
  return reshapeCart(res.body.data.cartLinesAdd.cart);
}

export async function removeFromCart(lineIds: string[]): Promise<Cart> {
  const cartId = (await cookies()).get('cartId')?.value!;
  const res = await shopifyFetch<ShopifyRemoveFromCartOperation>({
    query: removeFromCartMutation,
    variables: {
      cartId,
      lineIds
    }
  });

  return reshapeCart(res.body.data.cartLinesRemove.cart);
}

export async function updateCart(
  lines: { id: string; merchandiseId: string; quantity: number }[]
): Promise<Cart> {
  const cartId = (await cookies()).get('cartId')?.value!;
  const res = await shopifyFetch<ShopifyUpdateCartOperation>({
    query: editCartItemsMutation,
    variables: {
      cartId,
      lines
    }
  });

  return reshapeCart(res.body.data.cartLinesUpdate.cart);
}

export async function getCart(): Promise<Cart | undefined> {
  const cartId = (await cookies()).get('cartId')?.value;

  if (!cartId) {
    return undefined;
  }

  const res = await shopifyFetch<ShopifyCartOperation>({
    query: getCartQuery,
    variables: { cartId }
  });

  // Old carts becomes `null` when you checkout.
  if (!res.body.data.cart) {
    return undefined;
  }

  return reshapeCart(res.body.data.cart);
}

export async function getCollection(
  handle: string
): Promise<Collection | undefined> {
  'use cache';
  cacheTag(TAGS.collections);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyCollectionOperation>({
    query: getCollectionQuery,
    variables: {
      handle
    }
  });

  return reshapeCollection(res.body.data.collection);
}

export async function getCollectionProducts({
  collection,
  reverse,
  sortKey
}: {
  collection: string;
  reverse?: boolean;
  sortKey?: string;
}): Promise<Product[]> {
  'use cache';
  cacheTag(TAGS.collections, TAGS.products);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyCollectionProductsOperation>({
    query: getCollectionProductsQuery,
    variables: {
      handle: collection,
      reverse,
      sortKey: sortKey === 'CREATED_AT' ? 'CREATED' : sortKey
    }
  });

  if (!res.body.data.collection) {
    console.log(`No collection found for \`${collection}\``);
    return [];
  }

  return reshapeProducts(
    removeEdgesAndNodes(res.body.data.collection.products)
  );
}

export async function getCollections(): Promise<Collection[]> {
  'use cache';
  cacheTag(TAGS.collections);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyCollectionsOperation>({
    query: getCollectionsQuery
  });
  const shopifyCollections = removeEdgesAndNodes(res.body?.data?.collections);
  const collections = [
    {
      handle: '',
      title: 'All',
      description: 'All products',
      seo: {
        title: 'All',
        description: 'All products'
      },
      path: '/search',
      updatedAt: new Date().toISOString()
    },
    // Filter out the `hidden` collections.
    // Collections that start with `hidden-*` need to be hidden on the search page.
    ...reshapeCollections(shopifyCollections).filter(
      (collection) => !collection.handle.startsWith('hidden')
    )
  ];

  return collections;
}

export async function getMenu(handle: string): Promise<Menu[]> {
  'use cache';
  cacheTag(TAGS.collections);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyMenuOperation>({
    query: getMenuQuery,
    variables: {
      handle
    }
  });

  return (
    res.body?.data?.menu?.items.map((item: { title: string; url: string }) => ({
      title: item.title,
      path: item.url
        .replace(domain, '')
        .replace('/collections', '/search')
        .replace('/pages', '')
    })) || []
  );
}

export async function getPage(handle: string): Promise<Page> {
  const res = await shopifyFetch<ShopifyPageOperation>({
    query: getPageQuery,
    variables: { handle }
  });

  return res.body.data.pageByHandle;
}

export async function getPages(): Promise<Page[]> {
  const res = await shopifyFetch<ShopifyPagesOperation>({
    query: getPagesQuery
  });

  return removeEdgesAndNodes(res.body.data.pages);
}

export async function getProduct(handle: string): Promise<Product | undefined> {
  'use cache';
  cacheTag(TAGS.products);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyProductOperation>({
    query: getProductQuery,
    variables: {
      handle
    }
  });

  return reshapeProduct(res.body.data.product, false);
}

export async function getProductRecommendations(
  productId: string
): Promise<Product[]> {
  'use cache';
  cacheTag(TAGS.products);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyProductRecommendationsOperation>({
    query: getProductRecommendationsQuery,
    variables: {
      productId
    }
  });

  return reshapeProducts(res.body.data.productRecommendations);
}

export async function getProducts({
  query,
  reverse,
  sortKey
}: {
  query?: string;
  reverse?: boolean;
  sortKey?: string;
}): Promise<Product[]> {
  'use cache';
  cacheTag(TAGS.products);
  cacheLife('days');

  const res = await shopifyFetch<ShopifyProductsOperation>({
    query: getProductsQuery,
    variables: {
      query,
      reverse,
      sortKey
    }
  });

  return reshapeProducts(removeEdgesAndNodes(res.body.data.products));
}

// This is called from `app/api/revalidate.ts` so providers can control revalidation logic.
export async function revalidate(req: NextRequest): Promise<NextResponse> {
  // We always need to respond with a 200 status code to Shopify,
  // otherwise it will continue to retry the request.
  const collectionWebhooks = [
    'collections/create',
    'collections/delete',
    'collections/update'
  ];
  const productWebhooks = [
    'products/create',
    'products/delete',
    'products/update'
  ];
  const topic = (await headers()).get('x-shopify-topic') || 'unknown';
  const secret = req.nextUrl.searchParams.get('secret');
  const isCollectionUpdate = collectionWebhooks.includes(topic);
  const isProductUpdate = productWebhooks.includes(topic);

  if (!secret || secret !== process.env.SHOPIFY_REVALIDATION_SECRET) {
    console.error('Invalid revalidation secret.');
    return NextResponse.json({ status: 401 });
  }

  if (!isCollectionUpdate && !isProductUpdate) {
    // We don't need to revalidate anything for any other topics.
    return NextResponse.json({ status: 200 });
  }

  if (isCollectionUpdate) {
    revalidateTag(TAGS.collections);
  }

  if (isProductUpdate) {
    revalidateTag(TAGS.products);
  }

  return NextResponse.json({ status: 200, revalidated: true, now: Date.now() });
}

type Policy = {
  title: string;
  body: string;
  handle: string;
};

type PolicyResponse = {
  shop: {
    privacyPolicy?: Policy;
    termsOfService?: Policy;
    refundPolicy?: Policy;
  };
};

export async function getPolicy(handle: string): Promise<Policy | undefined> {
  "use cache";
  cacheTag("policies");
  cacheLife("days");

  const res = await shopifyFetch<PolicyResponse>({
    query: getPolicyQuery,
    variables: { handle } as ExtractVariables<PolicyResponse>, // Ensure variables are properly typed
  });

  // Dynamically access the correct policy
  return (
    res.body.shop.privacyPolicy ??
    res.body.shop.termsOfService ??
    res.body.shop.refundPolicy
  );
}

export async function getAllPolicies(): Promise<Policy[]> {
  "use cache";
  cacheTag("policies");
  cacheLife("days");

  const res = await shopifyFetch<PolicyResponse>({
    query: GET_ALL_POLICIES_QUERY,
  });

  // Ensure res.body.data.shop exists before accessing it
  if (!res?.body?.data?.shop) {
    console.error("Error fetching policies. Response:", res);
    return []; // Return an empty array instead of crashing
  }

  return Object.values(res.body.data.shop).filter(Boolean) as Policy[];
}

# ======================
# File: lib/shopify/fragments/image.ts
# ======================

const imageFragment = /* GraphQL */ `
  fragment image on Image {
    url
    altText
    width
    height
  }
`;

export default imageFragment;


# ======================
# File: lib/shopify/fragments/product.ts
# ======================

import imageFragment from './image';
import seoFragment from './seo';

const productFragment = /* GraphQL */ `
  fragment product on Product {
    id
    handle
    availableForSale
    title
    description
    descriptionHtml
    options {
      id
      name
      values
    }
    priceRange {
      maxVariantPrice {
        amount
        currencyCode
      }
      minVariantPrice {
        amount
        currencyCode
      }
    }
    variants(first: 250) {
      edges {
        node {
          id
          title
          availableForSale
          selectedOptions {
            name
            value
          }
          price {
            amount
            currencyCode
          }
        }
      }
    }
    featuredImage {
      ...image
    }
    images(first: 20) {
      edges {
        node {
          ...image
        }
      }
    }
    seo {
      ...seo
    }
    tags
    updatedAt
  }
  ${imageFragment}
  ${seoFragment}
`;

export default productFragment;


# ======================
# File: lib/shopify/fragments/seo.ts
# ======================

const seoFragment = /* GraphQL */ `
  fragment seo on SEO {
    description
    title
  }
`;

export default seoFragment;


# ======================
# File: lib/shopify/fragments/cart.ts
# ======================

import productFragment from './product';

const cartFragment = /* GraphQL */ `
  fragment cart on Cart {
    id
    checkoutUrl
    cost {
      subtotalAmount {
        amount
        currencyCode
      }
      totalAmount {
        amount
        currencyCode
      }
      totalTaxAmount {
        amount
        currencyCode
      }
    }
    lines(first: 100) {
      edges {
        node {
          id
          quantity
          cost {
            totalAmount {
              amount
              currencyCode
            }
          }
          merchandise {
            ... on ProductVariant {
              id
              title
              selectedOptions {
                name
                value
              }
              product {
                ...product
              }
            }
          }
        }
      }
    }
    totalQuantity
  }
  ${productFragment}
`;

export default cartFragment;


# ======================
# File: lib/shopify/mutations/cart.ts
# ======================

import cartFragment from '../fragments/cart';

export const addToCartMutation = /* GraphQL */ `
  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {
    cartLinesAdd(cartId: $cartId, lines: $lines) {
      cart {
        ...cart
      }
    }
  }
  ${cartFragment}
`;

export const createCartMutation = /* GraphQL */ `
  mutation createCart($lineItems: [CartLineInput!]) {
    cartCreate(input: { lines: $lineItems }) {
      cart {
        ...cart
      }
    }
  }
  ${cartFragment}
`;

export const editCartItemsMutation = /* GraphQL */ `
  mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {
    cartLinesUpdate(cartId: $cartId, lines: $lines) {
      cart {
        ...cart
      }
    }
  }
  ${cartFragment}
`;

export const removeFromCartMutation = /* GraphQL */ `
  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {
    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {
      cart {
        ...cart
      }
    }
  }
  ${cartFragment}
`;


# ======================
# File: lib/shopify/queries/policies.ts
# ======================

export const getPolicyQuery = /* GraphQL */ `
  query getPolicy($handle: String!) {
    shop {
      privacyPolicy {
        title
        body
        handle
      }
      termsOfService {
        title
        body
        handle
      }
      refundPolicy {
        title
        body
        handle
      }
    }
  }
`;

export const GET_ALL_POLICIES_QUERY = /* GraphQL */ `
query getAllPolicies {
  shop {
    privacyPolicy {
      title
      body
      handle
    }
    termsOfService {
      title
      body
      handle
    }
    refundPolicy {
      title
      body
      handle
    }
  }
}
`;

# ======================
# File: lib/shopify/queries/product.ts
# ======================

import productFragment from '../fragments/product';

export const getProductQuery = /* GraphQL */ `
  query getProduct($handle: String!) {
    product(handle: $handle) {
      ...product
    }
  }
  ${productFragment}
`;

export const getProductsQuery = /* GraphQL */ `
  query getProducts($sortKey: ProductSortKeys, $reverse: Boolean, $query: String) {
    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 100) {
      edges {
        node {
          ...product
        }
      }
    }
  }
  ${productFragment}
`;

export const getProductRecommendationsQuery = /* GraphQL */ `
  query getProductRecommendations($productId: ID!) {
    productRecommendations(productId: $productId) {
      ...product
    }
  }
  ${productFragment}
`;


# ======================
# File: lib/shopify/queries/collection.ts
# ======================

import productFragment from '../fragments/product';
import seoFragment from '../fragments/seo';

const collectionFragment = /* GraphQL */ `
  fragment collection on Collection {
    handle
    title
    description
    seo {
      ...seo
    }
    updatedAt
  }
  ${seoFragment}
`;

export const getCollectionQuery = /* GraphQL */ `
  query getCollection($handle: String!) {
    collection(handle: $handle) {
      ...collection
    }
  }
  ${collectionFragment}
`;

export const getCollectionsQuery = /* GraphQL */ `
  query getCollections {
    collections(first: 100, sortKey: TITLE) {
      edges {
        node {
          ...collection
        }
      }
    }
  }
  ${collectionFragment}
`;

export const getCollectionProductsQuery = /* GraphQL */ `
  query getCollectionProducts(
    $handle: String!
    $sortKey: ProductCollectionSortKeys
    $reverse: Boolean
  ) {
    collection(handle: $handle) {
      products(sortKey: $sortKey, reverse: $reverse, first: 100) {
        edges {
          node {
            ...product
          }
        }
      }
    }
  }
  ${productFragment}
`;


# ======================
# File: lib/shopify/queries/menu.ts
# ======================

export const getMenuQuery = /* GraphQL */ `
  query getMenu($handle: String!) {
    menu(handle: $handle) {
      items {
        title
        url
      }
    }
  }
`;


# ======================
# File: lib/shopify/queries/page.ts
# ======================

import seoFragment from '../fragments/seo';

const pageFragment = /* GraphQL */ `
  fragment page on Page {
    ... on Page {
      id
      title
      handle
      body
      bodySummary
      seo {
        ...seo
      }
      createdAt
      updatedAt
    }
  }
  ${seoFragment}
`;

export const getPageQuery = /* GraphQL */ `
  query getPage($handle: String!) {
    pageByHandle(handle: $handle) {
      ...page
    }
  }
  ${pageFragment}
`;

export const getPolicyQuery = /* GraphQL */ `
  query getPolicy($policyType: String!) {
    shop {
      policy: ${"$"}policyType {
        id
        title
        body
      }
    }
  }
`;

export const getPagesQuery = /* GraphQL */ `
  query getPages {
    pages(first: 100) {
      edges {
        node {
          ...page
        }
      }
    }
  }
  ${pageFragment}
`;


# ======================
# File: lib/shopify/queries/cart.ts
# ======================

import cartFragment from '../fragments/cart';

export const getCartQuery = /* GraphQL */ `
  query getCart($cartId: ID!) {
    cart(id: $cartId) {
      ...cart
    }
  }
  ${cartFragment}
`;


# ======================
# File: .vscode/settings.json
# ======================

{
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.organizeImports": "explicit",
    "source.sortMembers": "explicit"
  }
}


# ======================
# File: .vscode/launch.json
# ======================

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "pnpm dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "pnpm dev",
      "serverReadyAction": {
        "pattern": "started server on .+, url: (https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}
